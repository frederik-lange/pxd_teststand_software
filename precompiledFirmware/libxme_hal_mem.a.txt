In archive C:/BelleII/devenv/workspace/kekSVN-firmware-2/target/libxme_hal_mem.a:

mem_arch.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0  36384 Jul 30 19:07 2021 mem_arch.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000000  00000000  00000108  2**2
                  ALLOC
  3 .debug_abbrev 00000112  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002cd  00000000  00000000  0000021a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000633  00000000  00000000  000004e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 000072fc  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000118  00000000  00000000  00007e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000009b  00000000  00000000  00007f2e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 0000009d  00000000  00000000  00007fc9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  00008066  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    000002a3  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  00008329  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  00008354  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000000a4  00000000  00000000  00008388  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 mem_arch.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l       .bss	00000000 xme_core_config
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000004       O *COM*	00000004 xme_core_log_logCallback
00000000 g     F .text	0000001e xme_hal_mem_alloc
00000000         *UND*	00000000 pvPortMalloc
00000020 g     F .text	0000000e xme_hal_mem_realloc
00000030 g     F .text	00000016 xme_hal_mem_free
00000000         *UND*	00000000 vPortFree
00000048 g     F .text	00000040 xme_hal_mem_set
00000088 g     F .text	0000004c xme_hal_mem_copy



Disassembly of section .text:

00000000 <xme_hal_mem_alloc>:
void*
xme_hal_mem_alloc
(
	uint16_t size
)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	4603      	mov	r3, r0
   8:	80fb      	strh	r3, [r7, #6]
	return pvPortMalloc(size);
   a:	88fb      	ldrh	r3, [r7, #6]
   c:	4618      	mov	r0, r3
   e:	f7ff fffe 	bl	0 <pvPortMalloc>
			e: R_ARM_THM_CALL	pvPortMalloc
  12:	4603      	mov	r3, r0
}
  14:	4618      	mov	r0, r3
  16:	f107 0708 	add.w	r7, r7, #8
  1a:	46bd      	mov	sp, r7
  1c:	bd80      	pop	{r7, pc}
  1e:	bf00      	nop

00000020 <xme_hal_mem_realloc>:
xme_hal_mem_realloc
(
	void* mem,
	uint16_t size
)
{
  20:	b480      	push	{r7}
  22:	b083      	sub	sp, #12
  24:	af00      	add	r7, sp, #0
  26:	6078      	str	r0, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	807b      	strh	r3, [r7, #2]
	for (;;);
  2c:	e7fe      	b.n	2c <xme_hal_mem_realloc+0xc>
  2e:	bf00      	nop

00000030 <xme_hal_mem_free>:
void
xme_hal_mem_free
(
	void* mem
)
{
  30:	b580      	push	{r7, lr}
  32:	b082      	sub	sp, #8
  34:	af00      	add	r7, sp, #0
  36:	6078      	str	r0, [r7, #4]
	return vPortFree(mem);
  38:	6878      	ldr	r0, [r7, #4]
  3a:	f7ff fffe 	bl	0 <vPortFree>
			3a: R_ARM_THM_CALL	vPortFree
}
  3e:	f107 0708 	add.w	r7, r7, #8
  42:	46bd      	mov	sp, r7
  44:	bd80      	pop	{r7, pc}
  46:	bf00      	nop

00000048 <xme_hal_mem_set>:
(
	void* mem,
	uint8_t value,
	size_t num
)
{
  48:	b480      	push	{r7}
  4a:	b087      	sub	sp, #28
  4c:	af00      	add	r7, sp, #0
  4e:	60f8      	str	r0, [r7, #12]
  50:	460b      	mov	r3, r1
  52:	607a      	str	r2, [r7, #4]
  54:	72fb      	strb	r3, [r7, #11]
	// This implementation is only efficient on 8-bit controllers!

	uint8_t* m = (uint8_t*)mem;
  56:	68fb      	ldr	r3, [r7, #12]
  58:	617b      	str	r3, [r7, #20]
	uint8_t* l = m + num;
  5a:	697a      	ldr	r2, [r7, #20]
  5c:	687b      	ldr	r3, [r7, #4]
  5e:	18d3      	adds	r3, r2, r3
  60:	613b      	str	r3, [r7, #16]

	while (m < l)
  62:	e006      	b.n	72 <xme_hal_mem_set+0x2a>
	{
		*m++ = value;
  64:	697b      	ldr	r3, [r7, #20]
  66:	7afa      	ldrb	r2, [r7, #11]
  68:	701a      	strb	r2, [r3, #0]
  6a:	697b      	ldr	r3, [r7, #20]
  6c:	f103 0301 	add.w	r3, r3, #1
  70:	617b      	str	r3, [r7, #20]
	// This implementation is only efficient on 8-bit controllers!

	uint8_t* m = (uint8_t*)mem;
	uint8_t* l = m + num;

	while (m < l)
  72:	697a      	ldr	r2, [r7, #20]
  74:	693b      	ldr	r3, [r7, #16]
  76:	429a      	cmp	r2, r3
  78:	d3f4      	bcc.n	64 <xme_hal_mem_set+0x1c>
	{
		*m++ = value;
	}

	return mem;
  7a:	68fb      	ldr	r3, [r7, #12]
}
  7c:	4618      	mov	r0, r3
  7e:	f107 071c 	add.w	r7, r7, #28
  82:	46bd      	mov	sp, r7
  84:	bc80      	pop	{r7}
  86:	4770      	bx	lr

00000088 <xme_hal_mem_copy>:
(
	void* destination,
	const void* source,
	size_t num
)
{
  88:	b480      	push	{r7}
  8a:	b089      	sub	sp, #36	; 0x24
  8c:	af00      	add	r7, sp, #0
  8e:	60f8      	str	r0, [r7, #12]
  90:	60b9      	str	r1, [r7, #8]
  92:	607a      	str	r2, [r7, #4]
	// This implementation is only efficient on 8-bit controllers!

	uint8_t* m = (uint8_t*)destination;
  94:	68fb      	ldr	r3, [r7, #12]
  96:	61fb      	str	r3, [r7, #28]
	uint8_t* s = (uint8_t*)source;
  98:	68bb      	ldr	r3, [r7, #8]
  9a:	61bb      	str	r3, [r7, #24]
	uint8_t* l = m + num;
  9c:	69fa      	ldr	r2, [r7, #28]
  9e:	687b      	ldr	r3, [r7, #4]
  a0:	18d3      	adds	r3, r2, r3
  a2:	617b      	str	r3, [r7, #20]

	while (m < l)
  a4:	e00b      	b.n	be <xme_hal_mem_copy+0x36>
	{
		*m++ = *s++;
  a6:	69bb      	ldr	r3, [r7, #24]
  a8:	781a      	ldrb	r2, [r3, #0]
  aa:	69fb      	ldr	r3, [r7, #28]
  ac:	701a      	strb	r2, [r3, #0]
  ae:	69fb      	ldr	r3, [r7, #28]
  b0:	f103 0301 	add.w	r3, r3, #1
  b4:	61fb      	str	r3, [r7, #28]
  b6:	69bb      	ldr	r3, [r7, #24]
  b8:	f103 0301 	add.w	r3, r3, #1
  bc:	61bb      	str	r3, [r7, #24]

	uint8_t* m = (uint8_t*)destination;
	uint8_t* s = (uint8_t*)source;
	uint8_t* l = m + num;

	while (m < l)
  be:	69fa      	ldr	r2, [r7, #28]
  c0:	697b      	ldr	r3, [r7, #20]
  c2:	429a      	cmp	r2, r3
  c4:	d3ef      	bcc.n	a6 <xme_hal_mem_copy+0x1e>
	{
		*m++ = *s++;
	}

	return destination;	
  c6:	68fb      	ldr	r3, [r7, #12]
}
  c8:	4618      	mov	r0, r3
  ca:	f107 0724 	add.w	r7, r7, #36	; 0x24
  ce:	46bd      	mov	sp, r7
  d0:	bc80      	pop	{r7}
  d2:	4770      	bx	lr
