In archive C:/BelleII/devenv/workspace/kekSVN-firmware-2/target/libxme_stm32f0xspl_misc.a:

misc.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0 317104 Jul 30 19:07 2021 misc.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000001d8  2**0
                  ALLOC
  3 .debug_abbrev 00000135  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000546  00000000  00000000  0000030d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000003ef  00000000  00000000  00000853  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 0004b965  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000118  00000000  00000000  0004c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000089  00000000  00000000  0004c6bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 00000080  00000000  00000000  0004c748  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  0004c7c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  0004c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  0004cb28  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  0004cb53  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000009c  00000000  00000000  0004cb84  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 misc.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 g     F .text	00000024 NVIC_PriorityGroupConfig
00000024 g     F .text	000000d8 NVIC_Init
000000fc g     F .text	0000002c NVIC_SetVectorTable
00000128 g     F .text	00000044 NVIC_SystemLPConfig
0000016c g     F .text	00000038 SysTick_CLKSourceConfig



Disassembly of section .text:

00000000 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   8:	4a05      	ldr	r2, [pc, #20]	; (20 <NVIC_PriorityGroupConfig+0x20>)
   a:	687b      	ldr	r3, [r7, #4]
   c:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
  10:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
  14:	60d3      	str	r3, [r2, #12]
}
  16:	f107 070c 	add.w	r7, r7, #12
  1a:	46bd      	mov	sp, r7
  1c:	bc80      	pop	{r7}
  1e:	4770      	bx	lr
  20:	e000ed00 	.word	0xe000ed00

00000024 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
  24:	b480      	push	{r7}
  26:	b087      	sub	sp, #28
  28:	af00      	add	r7, sp, #0
  2a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  2c:	f04f 0300 	mov.w	r3, #0
  30:	617b      	str	r3, [r7, #20]
  32:	f04f 0300 	mov.w	r3, #0
  36:	613b      	str	r3, [r7, #16]
  38:	f04f 030f 	mov.w	r3, #15
  3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  3e:	687b      	ldr	r3, [r7, #4]
  40:	78db      	ldrb	r3, [r3, #3]
  42:	2b00      	cmp	r3, #0
  44:	d03f      	beq.n	c6 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
  46:	4b2b      	ldr	r3, [pc, #172]	; (f4 <NVIC_Init+0xd0>)
  48:	68db      	ldr	r3, [r3, #12]
  4a:	ea6f 0303 	mvn.w	r3, r3
  4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  52:	ea4f 2313 	mov.w	r3, r3, lsr #8
  56:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
  58:	697b      	ldr	r3, [r7, #20]
  5a:	f1c3 0304 	rsb	r3, r3, #4
  5e:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
  60:	697b      	ldr	r3, [r7, #20]
  62:	68fa      	ldr	r2, [r7, #12]
  64:	fa22 f303 	lsr.w	r3, r2, r3
  68:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	785b      	ldrb	r3, [r3, #1]
  6e:	461a      	mov	r2, r3
  70:	693b      	ldr	r3, [r7, #16]
  72:	fa02 f303 	lsl.w	r3, r2, r3
  76:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
  78:	687b      	ldr	r3, [r7, #4]
  7a:	789b      	ldrb	r3, [r3, #2]
  7c:	461a      	mov	r2, r3
  7e:	68fb      	ldr	r3, [r7, #12]
  80:	ea02 0303 	and.w	r3, r2, r3
  84:	697a      	ldr	r2, [r7, #20]
  86:	ea42 0303 	orr.w	r3, r2, r3
  8a:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
  8c:	697b      	ldr	r3, [r7, #20]
  8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  92:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
  94:	4918      	ldr	r1, [pc, #96]	; (f8 <NVIC_Init+0xd4>)
  96:	687b      	ldr	r3, [r7, #4]
  98:	781b      	ldrb	r3, [r3, #0]
  9a:	697a      	ldr	r2, [r7, #20]
  9c:	b2d2      	uxtb	r2, r2
  9e:	18cb      	adds	r3, r1, r3
  a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
  a4:	4b14      	ldr	r3, [pc, #80]	; (f8 <NVIC_Init+0xd4>)
  a6:	687a      	ldr	r2, [r7, #4]
  a8:	7812      	ldrb	r2, [r2, #0]
  aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
  ae:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  b0:	6879      	ldr	r1, [r7, #4]
  b2:	7809      	ldrb	r1, [r1, #0]
  b4:	f001 011f 	and.w	r1, r1, #31
  b8:	f04f 0001 	mov.w	r0, #1
  bc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
  c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  c4:	e011      	b.n	ea <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
  c6:	4b0c      	ldr	r3, [pc, #48]	; (f8 <NVIC_Init+0xd4>)
  c8:	687a      	ldr	r2, [r7, #4]
  ca:	7812      	ldrb	r2, [r2, #0]
  cc:	ea4f 1252 	mov.w	r2, r2, lsr #5
  d0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  d2:	6879      	ldr	r1, [r7, #4]
  d4:	7809      	ldrb	r1, [r1, #0]
  d6:	f001 011f 	and.w	r1, r1, #31
  da:	f04f 0001 	mov.w	r0, #1
  de:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
  e2:	f102 0220 	add.w	r2, r2, #32
  e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
  ea:	f107 071c 	add.w	r7, r7, #28
  ee:	46bd      	mov	sp, r7
  f0:	bc80      	pop	{r7}
  f2:	4770      	bx	lr
  f4:	e000ed00 	.word	0xe000ed00
  f8:	e000e100 	.word	0xe000e100

000000fc <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
  fc:	b480      	push	{r7}
  fe:	b083      	sub	sp, #12
 100:	af00      	add	r7, sp, #0
 102:	6078      	str	r0, [r7, #4]
 104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 106:	4a07      	ldr	r2, [pc, #28]	; (124 <NVIC_SetVectorTable+0x28>)
 108:	683b      	ldr	r3, [r7, #0]
 10a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 10e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 112:	6879      	ldr	r1, [r7, #4]
 114:	430b      	orrs	r3, r1
 116:	6093      	str	r3, [r2, #8]
}
 118:	f107 070c 	add.w	r7, r7, #12
 11c:	46bd      	mov	sp, r7
 11e:	bc80      	pop	{r7}
 120:	4770      	bx	lr
 122:	bf00      	nop
 124:	e000ed00 	.word	0xe000ed00

00000128 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 128:	b480      	push	{r7}
 12a:	b083      	sub	sp, #12
 12c:	af00      	add	r7, sp, #0
 12e:	4602      	mov	r2, r0
 130:	460b      	mov	r3, r1
 132:	71fa      	strb	r2, [r7, #7]
 134:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 136:	79bb      	ldrb	r3, [r7, #6]
 138:	2b00      	cmp	r3, #0
 13a:	d007      	beq.n	14c <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 13c:	4b0a      	ldr	r3, [pc, #40]	; (168 <NVIC_SystemLPConfig+0x40>)
 13e:	4a0a      	ldr	r2, [pc, #40]	; (168 <NVIC_SystemLPConfig+0x40>)
 140:	6911      	ldr	r1, [r2, #16]
 142:	79fa      	ldrb	r2, [r7, #7]
 144:	ea41 0202 	orr.w	r2, r1, r2
 148:	611a      	str	r2, [r3, #16]
 14a:	e008      	b.n	15e <NVIC_SystemLPConfig+0x36>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 14c:	4b06      	ldr	r3, [pc, #24]	; (168 <NVIC_SystemLPConfig+0x40>)
 14e:	4a06      	ldr	r2, [pc, #24]	; (168 <NVIC_SystemLPConfig+0x40>)
 150:	6911      	ldr	r1, [r2, #16]
 152:	79fa      	ldrb	r2, [r7, #7]
 154:	ea6f 0202 	mvn.w	r2, r2
 158:	ea01 0202 	and.w	r2, r1, r2
 15c:	611a      	str	r2, [r3, #16]
  }
}
 15e:	f107 070c 	add.w	r7, r7, #12
 162:	46bd      	mov	sp, r7
 164:	bc80      	pop	{r7}
 166:	4770      	bx	lr
 168:	e000ed00 	.word	0xe000ed00

0000016c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 16c:	b480      	push	{r7}
 16e:	b083      	sub	sp, #12
 170:	af00      	add	r7, sp, #0
 172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 174:	687b      	ldr	r3, [r7, #4]
 176:	2b04      	cmp	r3, #4
 178:	d106      	bne.n	188 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 17a:	4b09      	ldr	r3, [pc, #36]	; (1a0 <SysTick_CLKSourceConfig+0x34>)
 17c:	4a08      	ldr	r2, [pc, #32]	; (1a0 <SysTick_CLKSourceConfig+0x34>)
 17e:	6812      	ldr	r2, [r2, #0]
 180:	f042 0204 	orr.w	r2, r2, #4
 184:	601a      	str	r2, [r3, #0]
 186:	e005      	b.n	194 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 188:	4b05      	ldr	r3, [pc, #20]	; (1a0 <SysTick_CLKSourceConfig+0x34>)
 18a:	4a05      	ldr	r2, [pc, #20]	; (1a0 <SysTick_CLKSourceConfig+0x34>)
 18c:	6812      	ldr	r2, [r2, #0]
 18e:	f022 0204 	bic.w	r2, r2, #4
 192:	601a      	str	r2, [r3, #0]
  }
}
 194:	f107 070c 	add.w	r7, r7, #12
 198:	46bd      	mov	sp, r7
 19a:	bc80      	pop	{r7}
 19c:	4770      	bx	lr
 19e:	bf00      	nop
 1a0:	e000e010 	.word	0xe000e010

stm32f10x_exti.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0 317236 Jul 30 19:07 2021 stm32f10x_exti.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000288  2**0
                  ALLOC
  3 .debug_abbrev 0000014a  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000361  00000000  00000000  000003d2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000041e  00000000  00000000  00000733  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 0004b95d  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000001b4  00000000  00000000  0004c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000bb  00000000  00000000  0004c662  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 000000a2  00000000  00000000  0004c71d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  0004c7bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    000002db  00000000  00000000  0004c7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  0004caba  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  0004cae5  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000000ec  00000000  00000000  0004cb18  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 stm32f10x_exti.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 g     F .text	00000038 EXTI_DeInit
00000038 g     F .text	000000fc EXTI_Init
00000134 g     F .text	00000032 EXTI_StructInit
00000168 g     F .text	00000024 EXTI_GenerateSWInterrupt
0000018c g     F .text	0000003c EXTI_GetFlagStatus
000001c8 g     F .text	0000001c EXTI_ClearFlag
000001e4 g     F .text	00000054 EXTI_GetITStatus
00000238 g     F .text	0000001c EXTI_ClearITPendingBit



Disassembly of section .text:

00000000 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
   4:	4b0a      	ldr	r3, [pc, #40]	; (30 <EXTI_DeInit+0x30>)
   6:	f04f 0200 	mov.w	r2, #0
   a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
   c:	4b08      	ldr	r3, [pc, #32]	; (30 <EXTI_DeInit+0x30>)
   e:	f04f 0200 	mov.w	r2, #0
  12:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
  14:	4b06      	ldr	r3, [pc, #24]	; (30 <EXTI_DeInit+0x30>)
  16:	f04f 0200 	mov.w	r2, #0
  1a:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
  1c:	4b04      	ldr	r3, [pc, #16]	; (30 <EXTI_DeInit+0x30>)
  1e:	f04f 0200 	mov.w	r2, #0
  22:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
  24:	4b02      	ldr	r3, [pc, #8]	; (30 <EXTI_DeInit+0x30>)
  26:	4a03      	ldr	r2, [pc, #12]	; (34 <EXTI_DeInit+0x34>)
  28:	615a      	str	r2, [r3, #20]
}
  2a:	46bd      	mov	sp, r7
  2c:	bc80      	pop	{r7}
  2e:	4770      	bx	lr
  30:	40010400 	.word	0x40010400
  34:	000fffff 	.word	0x000fffff

00000038 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
  38:	b480      	push	{r7}
  3a:	b085      	sub	sp, #20
  3c:	af00      	add	r7, sp, #0
  3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
  40:	f04f 0300 	mov.w	r3, #0
  44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
  46:	4b3a      	ldr	r3, [pc, #232]	; (130 <EXTI_Init+0xf8>)
  48:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  4a:	687b      	ldr	r3, [r7, #4]
  4c:	799b      	ldrb	r3, [r3, #6]
  4e:	2b00      	cmp	r3, #0
  50:	d059      	beq.n	106 <EXTI_Init+0xce>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
  52:	4b37      	ldr	r3, [pc, #220]	; (130 <EXTI_Init+0xf8>)
  54:	4a36      	ldr	r2, [pc, #216]	; (130 <EXTI_Init+0xf8>)
  56:	6811      	ldr	r1, [r2, #0]
  58:	687a      	ldr	r2, [r7, #4]
  5a:	6812      	ldr	r2, [r2, #0]
  5c:	ea6f 0202 	mvn.w	r2, r2
  60:	ea01 0202 	and.w	r2, r1, r2
  64:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
  66:	4b32      	ldr	r3, [pc, #200]	; (130 <EXTI_Init+0xf8>)
  68:	4a31      	ldr	r2, [pc, #196]	; (130 <EXTI_Init+0xf8>)
  6a:	6851      	ldr	r1, [r2, #4]
  6c:	687a      	ldr	r2, [r7, #4]
  6e:	6812      	ldr	r2, [r2, #0]
  70:	ea6f 0202 	mvn.w	r2, r2
  74:	ea01 0202 	and.w	r2, r1, r2
  78:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
  7a:	687b      	ldr	r3, [r7, #4]
  7c:	791b      	ldrb	r3, [r3, #4]
  7e:	68fa      	ldr	r2, [r7, #12]
  80:	18d3      	adds	r3, r2, r3
  82:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
  84:	68fb      	ldr	r3, [r7, #12]
  86:	68fa      	ldr	r2, [r7, #12]
  88:	6811      	ldr	r1, [r2, #0]
  8a:	687a      	ldr	r2, [r7, #4]
  8c:	6812      	ldr	r2, [r2, #0]
  8e:	ea41 0202 	orr.w	r2, r1, r2
  92:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
  94:	4b26      	ldr	r3, [pc, #152]	; (130 <EXTI_Init+0xf8>)
  96:	4a26      	ldr	r2, [pc, #152]	; (130 <EXTI_Init+0xf8>)
  98:	6891      	ldr	r1, [r2, #8]
  9a:	687a      	ldr	r2, [r7, #4]
  9c:	6812      	ldr	r2, [r2, #0]
  9e:	ea6f 0202 	mvn.w	r2, r2
  a2:	ea01 0202 	and.w	r2, r1, r2
  a6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
  a8:	4b21      	ldr	r3, [pc, #132]	; (130 <EXTI_Init+0xf8>)
  aa:	4a21      	ldr	r2, [pc, #132]	; (130 <EXTI_Init+0xf8>)
  ac:	68d1      	ldr	r1, [r2, #12]
  ae:	687a      	ldr	r2, [r7, #4]
  b0:	6812      	ldr	r2, [r2, #0]
  b2:	ea6f 0202 	mvn.w	r2, r2
  b6:	ea01 0202 	and.w	r2, r1, r2
  ba:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
  bc:	687b      	ldr	r3, [r7, #4]
  be:	795b      	ldrb	r3, [r3, #5]
  c0:	2b10      	cmp	r3, #16
  c2:	d110      	bne.n	e6 <EXTI_Init+0xae>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
  c4:	4b1a      	ldr	r3, [pc, #104]	; (130 <EXTI_Init+0xf8>)
  c6:	4a1a      	ldr	r2, [pc, #104]	; (130 <EXTI_Init+0xf8>)
  c8:	6891      	ldr	r1, [r2, #8]
  ca:	687a      	ldr	r2, [r7, #4]
  cc:	6812      	ldr	r2, [r2, #0]
  ce:	ea41 0202 	orr.w	r2, r1, r2
  d2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
  d4:	4b16      	ldr	r3, [pc, #88]	; (130 <EXTI_Init+0xf8>)
  d6:	4a16      	ldr	r2, [pc, #88]	; (130 <EXTI_Init+0xf8>)
  d8:	68d1      	ldr	r1, [r2, #12]
  da:	687a      	ldr	r2, [r7, #4]
  dc:	6812      	ldr	r2, [r2, #0]
  de:	ea41 0202 	orr.w	r2, r1, r2
  e2:	60da      	str	r2, [r3, #12]
  e4:	e01e      	b.n	124 <EXTI_Init+0xec>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
  e6:	4b12      	ldr	r3, [pc, #72]	; (130 <EXTI_Init+0xf8>)
  e8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
  ea:	687b      	ldr	r3, [r7, #4]
  ec:	795b      	ldrb	r3, [r3, #5]
  ee:	68fa      	ldr	r2, [r7, #12]
  f0:	18d3      	adds	r3, r2, r3
  f2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
  f4:	68fb      	ldr	r3, [r7, #12]
  f6:	68fa      	ldr	r2, [r7, #12]
  f8:	6811      	ldr	r1, [r2, #0]
  fa:	687a      	ldr	r2, [r7, #4]
  fc:	6812      	ldr	r2, [r2, #0]
  fe:	ea41 0202 	orr.w	r2, r1, r2
 102:	601a      	str	r2, [r3, #0]
 104:	e00e      	b.n	124 <EXTI_Init+0xec>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 106:	687b      	ldr	r3, [r7, #4]
 108:	791b      	ldrb	r3, [r3, #4]
 10a:	68fa      	ldr	r2, [r7, #12]
 10c:	18d3      	adds	r3, r2, r3
 10e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 110:	68fb      	ldr	r3, [r7, #12]
 112:	68fa      	ldr	r2, [r7, #12]
 114:	6811      	ldr	r1, [r2, #0]
 116:	687a      	ldr	r2, [r7, #4]
 118:	6812      	ldr	r2, [r2, #0]
 11a:	ea6f 0202 	mvn.w	r2, r2
 11e:	ea01 0202 	and.w	r2, r1, r2
 122:	601a      	str	r2, [r3, #0]
  }
}
 124:	f107 0714 	add.w	r7, r7, #20
 128:	46bd      	mov	sp, r7
 12a:	bc80      	pop	{r7}
 12c:	4770      	bx	lr
 12e:	bf00      	nop
 130:	40010400 	.word	0x40010400

00000134 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 134:	b480      	push	{r7}
 136:	b083      	sub	sp, #12
 138:	af00      	add	r7, sp, #0
 13a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 13c:	687b      	ldr	r3, [r7, #4]
 13e:	f04f 0200 	mov.w	r2, #0
 142:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 144:	687b      	ldr	r3, [r7, #4]
 146:	f04f 0200 	mov.w	r2, #0
 14a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 14c:	687b      	ldr	r3, [r7, #4]
 14e:	f04f 020c 	mov.w	r2, #12
 152:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 154:	687b      	ldr	r3, [r7, #4]
 156:	f04f 0200 	mov.w	r2, #0
 15a:	719a      	strb	r2, [r3, #6]
}
 15c:	f107 070c 	add.w	r7, r7, #12
 160:	46bd      	mov	sp, r7
 162:	bc80      	pop	{r7}
 164:	4770      	bx	lr
 166:	bf00      	nop

00000168 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 168:	b480      	push	{r7}
 16a:	b083      	sub	sp, #12
 16c:	af00      	add	r7, sp, #0
 16e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 170:	4b05      	ldr	r3, [pc, #20]	; (188 <EXTI_GenerateSWInterrupt+0x20>)
 172:	4a05      	ldr	r2, [pc, #20]	; (188 <EXTI_GenerateSWInterrupt+0x20>)
 174:	6911      	ldr	r1, [r2, #16]
 176:	687a      	ldr	r2, [r7, #4]
 178:	ea41 0202 	orr.w	r2, r1, r2
 17c:	611a      	str	r2, [r3, #16]
}
 17e:	f107 070c 	add.w	r7, r7, #12
 182:	46bd      	mov	sp, r7
 184:	bc80      	pop	{r7}
 186:	4770      	bx	lr
 188:	40010400 	.word	0x40010400

0000018c <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 18c:	b480      	push	{r7}
 18e:	b085      	sub	sp, #20
 190:	af00      	add	r7, sp, #0
 192:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 194:	f04f 0300 	mov.w	r3, #0
 198:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 19a:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <EXTI_GetFlagStatus+0x38>)
 19c:	695a      	ldr	r2, [r3, #20]
 19e:	687b      	ldr	r3, [r7, #4]
 1a0:	ea02 0303 	and.w	r3, r2, r3
 1a4:	2b00      	cmp	r3, #0
 1a6:	d003      	beq.n	1b0 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 1a8:	f04f 0301 	mov.w	r3, #1
 1ac:	73fb      	strb	r3, [r7, #15]
 1ae:	e002      	b.n	1b6 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 1b0:	f04f 0300 	mov.w	r3, #0
 1b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 1b8:	4618      	mov	r0, r3
 1ba:	f107 0714 	add.w	r7, r7, #20
 1be:	46bd      	mov	sp, r7
 1c0:	bc80      	pop	{r7}
 1c2:	4770      	bx	lr
 1c4:	40010400 	.word	0x40010400

000001c8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 1c8:	b480      	push	{r7}
 1ca:	b083      	sub	sp, #12
 1cc:	af00      	add	r7, sp, #0
 1ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <EXTI_ClearFlag+0x18>)
 1d2:	687a      	ldr	r2, [r7, #4]
 1d4:	615a      	str	r2, [r3, #20]
}
 1d6:	f107 070c 	add.w	r7, r7, #12
 1da:	46bd      	mov	sp, r7
 1dc:	bc80      	pop	{r7}
 1de:	4770      	bx	lr
 1e0:	40010400 	.word	0x40010400

000001e4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 1e4:	b480      	push	{r7}
 1e6:	b085      	sub	sp, #20
 1e8:	af00      	add	r7, sp, #0
 1ea:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 1ec:	f04f 0300 	mov.w	r3, #0
 1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 1f2:	f04f 0300 	mov.w	r3, #0
 1f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 1f8:	4b0e      	ldr	r3, [pc, #56]	; (234 <EXTI_GetITStatus+0x50>)
 1fa:	681a      	ldr	r2, [r3, #0]
 1fc:	687b      	ldr	r3, [r7, #4]
 1fe:	ea02 0303 	and.w	r3, r2, r3
 202:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 204:	4b0b      	ldr	r3, [pc, #44]	; (234 <EXTI_GetITStatus+0x50>)
 206:	695a      	ldr	r2, [r3, #20]
 208:	687b      	ldr	r3, [r7, #4]
 20a:	ea02 0303 	and.w	r3, r2, r3
 20e:	2b00      	cmp	r3, #0
 210:	d006      	beq.n	220 <EXTI_GetITStatus+0x3c>
 212:	68bb      	ldr	r3, [r7, #8]
 214:	2b00      	cmp	r3, #0
 216:	d003      	beq.n	220 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
 218:	f04f 0301 	mov.w	r3, #1
 21c:	73fb      	strb	r3, [r7, #15]
 21e:	e002      	b.n	226 <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 220:	f04f 0300 	mov.w	r3, #0
 224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 226:	7bfb      	ldrb	r3, [r7, #15]
}
 228:	4618      	mov	r0, r3
 22a:	f107 0714 	add.w	r7, r7, #20
 22e:	46bd      	mov	sp, r7
 230:	bc80      	pop	{r7}
 232:	4770      	bx	lr
 234:	40010400 	.word	0x40010400

00000238 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 238:	b480      	push	{r7}
 23a:	b083      	sub	sp, #12
 23c:	af00      	add	r7, sp, #0
 23e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 240:	4b03      	ldr	r3, [pc, #12]	; (250 <EXTI_ClearITPendingBit+0x18>)
 242:	687a      	ldr	r2, [r7, #4]
 244:	615a      	str	r2, [r3, #20]
}
 246:	f107 070c 	add.w	r7, r7, #12
 24a:	46bd      	mov	sp, r7
 24c:	bc80      	pop	{r7}
 24e:	4770      	bx	lr
 250:	40010400 	.word	0x40010400
