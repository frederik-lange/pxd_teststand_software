In archive C:/BelleII/devenv/workspace/kekSVN-firmware-2/target/libxme_hal_tls.a:

tls_arch.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0  34932 Jul 30 19:07 2021 tls_arch.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000000cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000000  00000000  000000cc  2**2
                  ALLOC
  3 .debug_abbrev 00000100  00000000  00000000  000000cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002eb  00000000  00000000  000001cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000575  00000000  00000000  000004b7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 0000690a  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000158  00000000  00000000  00007336  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000d8  00000000  00000000  0000748e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 000000cd  00000000  00000000  00007566  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  00007633  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    0000055b  00000000  00000000  00007653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  00007bae  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  00007bd9  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000000d0  00000000  00000000  00007c0c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 tls_arch.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l       .bss	00000000 xme_core_config
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000004       O *COM*	00000004 xme_core_log_logCallback
00000000 g     F .text	00000010 xme_hal_tls_init
00000010 g     F .text	0000000a xme_hal_tls_fini
0000001c g     F .text	0000001e xme_hal_tls_alloc
00000000         *UND*	00000000 xme_hal_sharedPtr_create
0000003c g     F .text	0000001e xme_hal_tls_get
00000000         *UND*	00000000 xme_hal_sharedPtr_getPointer
0000005c g     F .text	00000020 xme_hal_tls_free
00000000         *UND*	00000000 xme_hal_sharedPtr_destroy
0000007c g     F .text	00000010 xme_hal_tls_registerThread
0000008c g     F .text	0000000a xme_hal_tls_deregisterThread



Disassembly of section .text:

00000000 <xme_hal_tls_init>:
/******************************************************************************/
/***   Implementation                                                       ***/
/******************************************************************************/
xme_core_status_t
xme_hal_tls_init()
{
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
	// Nothing to do

	return XME_CORE_STATUS_SUCCESS;
   4:	f04f 0300 	mov.w	r3, #0
}
   8:	4618      	mov	r0, r3
   a:	46bd      	mov	sp, r7
   c:	bc80      	pop	{r7}
   e:	4770      	bx	lr

00000010 <xme_hal_tls_fini>:

void
xme_hal_tls_fini()
{
  10:	b480      	push	{r7}
  12:	af00      	add	r7, sp, #0
	// Nothing to do
}
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

0000001c <xme_hal_tls_alloc>:
xme_hal_tls_handle_t
xme_hal_tls_alloc
(
	uint16_t size
)
{
  1c:	b580      	push	{r7, lr}
  1e:	b082      	sub	sp, #8
  20:	af00      	add	r7, sp, #0
  22:	4603      	mov	r3, r0
  24:	80fb      	strh	r3, [r7, #6]
	// Return a handle to the memory
	return (xme_hal_tls_handle_t)xme_hal_sharedPtr_create(size);
  26:	88fb      	ldrh	r3, [r7, #6]
  28:	4618      	mov	r0, r3
  2a:	f7ff fffe 	bl	0 <xme_hal_sharedPtr_create>
			2a: R_ARM_THM_CALL	xme_hal_sharedPtr_create
  2e:	4603      	mov	r3, r0
}
  30:	4618      	mov	r0, r3
  32:	f107 0708 	add.w	r7, r7, #8
  36:	46bd      	mov	sp, r7
  38:	bd80      	pop	{r7, pc}
  3a:	bf00      	nop

0000003c <xme_hal_tls_get>:
void*
xme_hal_tls_get
(
	xme_hal_tls_handle_t tlsHandle
)
{
  3c:	b580      	push	{r7, lr}
  3e:	b082      	sub	sp, #8
  40:	af00      	add	r7, sp, #0
  42:	4603      	mov	r3, r0
  44:	80fb      	strh	r3, [r7, #6]
	// Return the pointer to the memory
	return xme_hal_sharedPtr_getPointer((xme_hal_sharedPtr_t)tlsHandle);
  46:	88fb      	ldrh	r3, [r7, #6]
  48:	4618      	mov	r0, r3
  4a:	f7ff fffe 	bl	0 <xme_hal_sharedPtr_getPointer>
			4a: R_ARM_THM_CALL	xme_hal_sharedPtr_getPointer
  4e:	4603      	mov	r3, r0
}
  50:	4618      	mov	r0, r3
  52:	f107 0708 	add.w	r7, r7, #8
  56:	46bd      	mov	sp, r7
  58:	bd80      	pop	{r7, pc}
  5a:	bf00      	nop

0000005c <xme_hal_tls_free>:
xme_core_status_t
xme_hal_tls_free
(
	xme_hal_tls_handle_t tlsHandle
)
{
  5c:	b580      	push	{r7, lr}
  5e:	b082      	sub	sp, #8
  60:	af00      	add	r7, sp, #0
  62:	4603      	mov	r3, r0
  64:	80fb      	strh	r3, [r7, #6]
	xme_hal_sharedPtr_destroy((xme_hal_sharedPtr_t)tlsHandle);
  66:	88fb      	ldrh	r3, [r7, #6]
  68:	4618      	mov	r0, r3
  6a:	f7ff fffe 	bl	0 <xme_hal_sharedPtr_destroy>
			6a: R_ARM_THM_CALL	xme_hal_sharedPtr_destroy

	return XME_CORE_STATUS_SUCCESS;
  6e:	f04f 0300 	mov.w	r3, #0
}
  72:	4618      	mov	r0, r3
  74:	f107 0708 	add.w	r7, r7, #8
  78:	46bd      	mov	sp, r7
  7a:	bd80      	pop	{r7, pc}

0000007c <xme_hal_tls_registerThread>:

xme_core_status_t
xme_hal_tls_registerThread()
{
  7c:	b480      	push	{r7}
  7e:	af00      	add	r7, sp, #0
	// Nothing to do

	return XME_CORE_STATUS_SUCCESS;
  80:	f04f 0300 	mov.w	r3, #0
}
  84:	4618      	mov	r0, r3
  86:	46bd      	mov	sp, r7
  88:	bc80      	pop	{r7}
  8a:	4770      	bx	lr

0000008c <xme_hal_tls_deregisterThread>:

void
xme_hal_tls_deregisterThread()
{
  8c:	b480      	push	{r7}
  8e:	af00      	add	r7, sp, #0
	// Nothing to do
}
  90:	46bd      	mov	sp, r7
  92:	bc80      	pop	{r7}
  94:	4770      	bx	lr
  96:	bf00      	nop
