In archive C:/BelleII/devenv/workspace/kekSVN-firmware-2/target/libxme_freertos_kernel.a:

list.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0  30272 Jul 30 19:07 2021 list.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000001b0  2**0
                  ALLOC
  3 .debug_abbrev 000000b6  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a6  00000000  00000000  00000266  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000449  00000000  00000000  0000050c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 00005e89  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000118  00000000  00000000  000067de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000071  00000000  00000000  000068f6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 0000007a  00000000  00000000  00006967  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  000069e1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    00000216  00000000  00000000  00006a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  00006c17  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  00006c42  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000009c  00000000  00000000  00006c74  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 list.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 g     F .text	00000046 vListInitialise
00000048 g     F .text	0000001a vListInitialiseItem
00000064 g     F .text	00000050 vListInsertEnd
000000b4 g     F .text	00000074 vListInsert
00000128 g     F .text	00000052 vListRemove



Disassembly of section .text:

00000000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   8:	687b      	ldr	r3, [r7, #4]
   a:	f103 0308 	add.w	r3, r3, #8
   e:	461a      	mov	r2, r3
  10:	687b      	ldr	r3, [r7, #4]
  12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  14:	687b      	ldr	r3, [r7, #4]
  16:	f04f 32ff 	mov.w	r2, #4294967295
  1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	f103 0308 	add.w	r3, r3, #8
  22:	461a      	mov	r2, r3
  24:	687b      	ldr	r3, [r7, #4]
  26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  28:	687b      	ldr	r3, [r7, #4]
  2a:	f103 0308 	add.w	r3, r3, #8
  2e:	461a      	mov	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  34:	687b      	ldr	r3, [r7, #4]
  36:	f04f 0200 	mov.w	r2, #0
  3a:	601a      	str	r2, [r3, #0]
}
  3c:	f107 070c 	add.w	r7, r7, #12
  40:	46bd      	mov	sp, r7
  42:	bc80      	pop	{r7}
  44:	4770      	bx	lr
  46:	bf00      	nop

00000048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  48:	b480      	push	{r7}
  4a:	b083      	sub	sp, #12
  4c:	af00      	add	r7, sp, #0
  4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  50:	687b      	ldr	r3, [r7, #4]
  52:	f04f 0200 	mov.w	r2, #0
  56:	611a      	str	r2, [r3, #16]
}
  58:	f107 070c 	add.w	r7, r7, #12
  5c:	46bd      	mov	sp, r7
  5e:	bc80      	pop	{r7}
  60:	4770      	bx	lr
  62:	bf00      	nop

00000064 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  64:	b480      	push	{r7}
  66:	b085      	sub	sp, #20
  68:	af00      	add	r7, sp, #0
  6a:	6078      	str	r0, [r7, #4]
  6c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  6e:	687b      	ldr	r3, [r7, #4]
  70:	685b      	ldr	r3, [r3, #4]
  72:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  74:	68fb      	ldr	r3, [r7, #12]
  76:	685a      	ldr	r2, [r3, #4]
  78:	683b      	ldr	r3, [r7, #0]
  7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  7c:	687b      	ldr	r3, [r7, #4]
  7e:	685a      	ldr	r2, [r3, #4]
  80:	683b      	ldr	r3, [r7, #0]
  82:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  84:	68fb      	ldr	r3, [r7, #12]
  86:	685b      	ldr	r3, [r3, #4]
  88:	683a      	ldr	r2, [r7, #0]
  8a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  8c:	683a      	ldr	r2, [r7, #0]
  8e:	68fb      	ldr	r3, [r7, #12]
  90:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  92:	683a      	ldr	r2, [r7, #0]
  94:	687b      	ldr	r3, [r7, #4]
  96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  98:	683b      	ldr	r3, [r7, #0]
  9a:	687a      	ldr	r2, [r7, #4]
  9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  9e:	687b      	ldr	r3, [r7, #4]
  a0:	681b      	ldr	r3, [r3, #0]
  a2:	f103 0201 	add.w	r2, r3, #1
  a6:	687b      	ldr	r3, [r7, #4]
  a8:	601a      	str	r2, [r3, #0]
}
  aa:	f107 0714 	add.w	r7, r7, #20
  ae:	46bd      	mov	sp, r7
  b0:	bc80      	pop	{r7}
  b2:	4770      	bx	lr

000000b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  b4:	b480      	push	{r7}
  b6:	b085      	sub	sp, #20
  b8:	af00      	add	r7, sp, #0
  ba:	6078      	str	r0, [r7, #4]
  bc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  be:	683b      	ldr	r3, [r7, #0]
  c0:	681b      	ldr	r3, [r3, #0]
  c2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  c4:	68bb      	ldr	r3, [r7, #8]
  c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  ca:	d103      	bne.n	d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  cc:	687b      	ldr	r3, [r7, #4]
  ce:	691b      	ldr	r3, [r3, #16]
  d0:	60fb      	str	r3, [r7, #12]
  d2:	e00d      	b.n	f0 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  d4:	687b      	ldr	r3, [r7, #4]
  d6:	f103 0308 	add.w	r3, r3, #8
  da:	60fb      	str	r3, [r7, #12]
  dc:	e002      	b.n	e4 <vListInsert+0x30>
  de:	68fb      	ldr	r3, [r7, #12]
  e0:	685b      	ldr	r3, [r3, #4]
  e2:	60fb      	str	r3, [r7, #12]
  e4:	68fb      	ldr	r3, [r7, #12]
  e6:	685b      	ldr	r3, [r3, #4]
  e8:	681a      	ldr	r2, [r3, #0]
  ea:	68bb      	ldr	r3, [r7, #8]
  ec:	429a      	cmp	r2, r3
  ee:	d9f6      	bls.n	de <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  f0:	68fb      	ldr	r3, [r7, #12]
  f2:	685a      	ldr	r2, [r3, #4]
  f4:	683b      	ldr	r3, [r7, #0]
  f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  f8:	683b      	ldr	r3, [r7, #0]
  fa:	685b      	ldr	r3, [r3, #4]
  fc:	683a      	ldr	r2, [r7, #0]
  fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 100:	683b      	ldr	r3, [r7, #0]
 102:	68fa      	ldr	r2, [r7, #12]
 104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 106:	683a      	ldr	r2, [r7, #0]
 108:	68fb      	ldr	r3, [r7, #12]
 10a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 10c:	683b      	ldr	r3, [r7, #0]
 10e:	687a      	ldr	r2, [r7, #4]
 110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 112:	687b      	ldr	r3, [r7, #4]
 114:	681b      	ldr	r3, [r3, #0]
 116:	f103 0201 	add.w	r2, r3, #1
 11a:	687b      	ldr	r3, [r7, #4]
 11c:	601a      	str	r2, [r3, #0]
}
 11e:	f107 0714 	add.w	r7, r7, #20
 122:	46bd      	mov	sp, r7
 124:	bc80      	pop	{r7}
 126:	4770      	bx	lr

00000128 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 128:	b480      	push	{r7}
 12a:	b085      	sub	sp, #20
 12c:	af00      	add	r7, sp, #0
 12e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 130:	687b      	ldr	r3, [r7, #4]
 132:	685b      	ldr	r3, [r3, #4]
 134:	687a      	ldr	r2, [r7, #4]
 136:	6892      	ldr	r2, [r2, #8]
 138:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 13a:	687b      	ldr	r3, [r7, #4]
 13c:	689b      	ldr	r3, [r3, #8]
 13e:	687a      	ldr	r2, [r7, #4]
 140:	6852      	ldr	r2, [r2, #4]
 142:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 144:	687b      	ldr	r3, [r7, #4]
 146:	691b      	ldr	r3, [r3, #16]
 148:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 14a:	68fb      	ldr	r3, [r7, #12]
 14c:	685a      	ldr	r2, [r3, #4]
 14e:	687b      	ldr	r3, [r7, #4]
 150:	429a      	cmp	r2, r3
 152:	d103      	bne.n	15c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 154:	687b      	ldr	r3, [r7, #4]
 156:	689a      	ldr	r2, [r3, #8]
 158:	68fb      	ldr	r3, [r7, #12]
 15a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 15c:	687b      	ldr	r3, [r7, #4]
 15e:	f04f 0200 	mov.w	r2, #0
 162:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 164:	68fb      	ldr	r3, [r7, #12]
 166:	681b      	ldr	r3, [r3, #0]
 168:	f103 32ff 	add.w	r2, r3, #4294967295
 16c:	68fb      	ldr	r3, [r7, #12]
 16e:	601a      	str	r2, [r3, #0]
}
 170:	f107 0714 	add.w	r7, r7, #20
 174:	46bd      	mov	sp, r7
 176:	bc80      	pop	{r7}
 178:	4770      	bx	lr
 17a:	bf00      	nop

queue.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0  40096 Jul 30 19:07 2021 queue.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f8  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000082c  2**0
                  ALLOC
  3 .debug_abbrev 00000109  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000077f  00000000  00000000  00000935  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000584  00000000  00000000  000010b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 00006654  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000380  00000000  00000000  00007c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000012e  00000000  00000000  0000800c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 000000d4  00000000  00000000  0000813a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  0000820e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    000004b3  00000000  00000000  0000822e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002b  00000000  00000000  000086e1  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000204  00000000  00000000  00008740  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 queue.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
0000059c l     F .text	000000c2 prvCopyDataToQueue
000007a0 l     F .text	0000002e prvIsQueueFull
000006b0 l     F .text	000000a0 prvUnlockQueue
00000660 l     F .text	0000004e prvCopyDataFromQueue
00000750 l     F .text	0000002a prvIsQueueEmpty
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 g     F .text	000000d4 xQueueGenericCreate
00000000         *UND*	00000000 pvPortMalloc
00000000         *UND*	00000000 vListInitialise
00000000         *UND*	00000000 vPortFree
000000d4 g     F .text	0000009a xQueueCreateMutex
00000170 g     F .text	00000120 xQueueGenericSend
00000000         *UND*	00000000 vPortEnterCritical
00000000         *UND*	00000000 xTaskRemoveFromEventList
00000000         *UND*	00000000 vPortYieldFromISR
00000000         *UND*	00000000 vPortExitCritical
00000000         *UND*	00000000 vTaskSetTimeOutState
00000000         *UND*	00000000 vTaskSuspendAll
00000000         *UND*	00000000 xTaskCheckForTimeOut
00000000         *UND*	00000000 vTaskPlaceOnEventList
00000000         *UND*	00000000 xTaskResumeAll
00000290 g     F .text	0000008e xQueueGenericSendFromISR
00000320 g     F .text	00000188 xQueueGenericReceive
00000000         *UND*	00000000 xTaskGetCurrentTaskHandle
00000000         *UND*	00000000 vTaskPriorityInherit
000004a8 g     F .text	00000092 xQueueReceiveFromISR
0000053c g     F .text	00000022 uxQueueMessagesWaiting
00000560 g     F .text	0000001c uxQueueMessagesWaitingFromISR
0000057c g     F .text	00000020 vQueueDelete
00000000         *UND*	00000000 vTaskPriorityDisinherit
00000000         *UND*	00000000 memcpy
00000000         *UND*	00000000 vTaskMissedYield
0000077c g     F .text	00000024 xQueueIsQueueEmptyFromISR
000007d0 g     F .text	00000028 xQueueIsQueueFullFromISR



Disassembly of section .text:

00000000 <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   0:	b580      	push	{r7, lr}
   2:	b088      	sub	sp, #32
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	4613      	mov	r3, r2
   c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   e:	f04f 0300 	mov.w	r3, #0
  12:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  14:	68fb      	ldr	r3, [r7, #12]
  16:	2b00      	cmp	r3, #0
  18:	d056      	beq.n	c8 <xQueueGenericCreate+0xc8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  1a:	f04f 004c 	mov.w	r0, #76	; 0x4c
  1e:	f7ff fffe 	bl	0 <pvPortMalloc>
			1e: R_ARM_THM_CALL	pvPortMalloc
  22:	4603      	mov	r3, r0
  24:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
  26:	69bb      	ldr	r3, [r7, #24]
  28:	2b00      	cmp	r3, #0
  2a:	d04d      	beq.n	c8 <xQueueGenericCreate+0xc8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	68ba      	ldr	r2, [r7, #8]
  30:	fb02 f303 	mul.w	r3, r2, r3
  34:	f103 0301 	add.w	r3, r3, #1
  38:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  3a:	6978      	ldr	r0, [r7, #20]
  3c:	f7ff fffe 	bl	0 <pvPortMalloc>
			3c: R_ARM_THM_CALL	pvPortMalloc
  40:	4603      	mov	r3, r0
  42:	461a      	mov	r2, r3
  44:	69bb      	ldr	r3, [r7, #24]
  46:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  48:	69bb      	ldr	r3, [r7, #24]
  4a:	681b      	ldr	r3, [r3, #0]
  4c:	2b00      	cmp	r3, #0
  4e:	d038      	beq.n	c2 <xQueueGenericCreate+0xc2>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
  50:	69bb      	ldr	r3, [r7, #24]
  52:	681a      	ldr	r2, [r3, #0]
  54:	68fb      	ldr	r3, [r7, #12]
  56:	68b9      	ldr	r1, [r7, #8]
  58:	fb01 f303 	mul.w	r3, r1, r3
  5c:	18d2      	adds	r2, r2, r3
  5e:	69bb      	ldr	r3, [r7, #24]
  60:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  62:	69bb      	ldr	r3, [r7, #24]
  64:	f04f 0200 	mov.w	r2, #0
  68:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
  6a:	69bb      	ldr	r3, [r7, #24]
  6c:	681a      	ldr	r2, [r3, #0]
  6e:	69bb      	ldr	r3, [r7, #24]
  70:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
  72:	69bb      	ldr	r3, [r7, #24]
  74:	681a      	ldr	r2, [r3, #0]
  76:	68fb      	ldr	r3, [r7, #12]
  78:	f103 33ff 	add.w	r3, r3, #4294967295
  7c:	68b9      	ldr	r1, [r7, #8]
  7e:	fb01 f303 	mul.w	r3, r1, r3
  82:	18d2      	adds	r2, r2, r3
  84:	69bb      	ldr	r3, [r7, #24]
  86:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
  88:	69bb      	ldr	r3, [r7, #24]
  8a:	68fa      	ldr	r2, [r7, #12]
  8c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  8e:	69bb      	ldr	r3, [r7, #24]
  90:	68ba      	ldr	r2, [r7, #8]
  92:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
  94:	69bb      	ldr	r3, [r7, #24]
  96:	f04f 32ff 	mov.w	r2, #4294967295
  9a:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
  9c:	69bb      	ldr	r3, [r7, #24]
  9e:	f04f 32ff 	mov.w	r2, #4294967295
  a2:	649a      	str	r2, [r3, #72]	; 0x48
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  a4:	69bb      	ldr	r3, [r7, #24]
  a6:	f103 0310 	add.w	r3, r3, #16
  aa:	4618      	mov	r0, r3
  ac:	f7ff fffe 	bl	0 <vListInitialise>
			ac: R_ARM_THM_CALL	vListInitialise
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  b0:	69bb      	ldr	r3, [r7, #24]
  b2:	f103 0324 	add.w	r3, r3, #36	; 0x24
  b6:	4618      	mov	r0, r3
  b8:	f7ff fffe 	bl	0 <vListInitialise>
			b8: R_ARM_THM_CALL	vListInitialise

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  bc:	69bb      	ldr	r3, [r7, #24]
  be:	61fb      	str	r3, [r7, #28]
  c0:	e002      	b.n	c8 <xQueueGenericCreate+0xc8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  c2:	69b8      	ldr	r0, [r7, #24]
  c4:	f7ff fffe 	bl	0 <vPortFree>
			c4: R_ARM_THM_CALL	vPortFree
		}
	}

	configASSERT( xReturn );

	return xReturn;
  c8:	69fb      	ldr	r3, [r7, #28]
}
  ca:	4618      	mov	r0, r3
  cc:	f107 0720 	add.w	r7, r7, #32
  d0:	46bd      	mov	sp, r7
  d2:	bd80      	pop	{r7, pc}

000000d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
  d4:	b580      	push	{r7, lr}
  d6:	b084      	sub	sp, #16
  d8:	af00      	add	r7, sp, #0
  da:	4603      	mov	r3, r0
  dc:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;
	
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  de:	f04f 004c 	mov.w	r0, #76	; 0x4c
  e2:	f7ff fffe 	bl	0 <pvPortMalloc>
			e2: R_ARM_THM_CALL	pvPortMalloc
  e6:	4603      	mov	r3, r0
  e8:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
  ea:	68fb      	ldr	r3, [r7, #12]
  ec:	2b00      	cmp	r3, #0
  ee:	d038      	beq.n	162 <xQueueCreateMutex+0x8e>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  f0:	68fb      	ldr	r3, [r7, #12]
  f2:	f04f 0200 	mov.w	r2, #0
  f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  f8:	68fb      	ldr	r3, [r7, #12]
  fa:	f04f 0200 	mov.w	r2, #0
  fe:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 100:	68fb      	ldr	r3, [r7, #12]
 102:	f04f 0200 	mov.w	r2, #0
 106:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
 108:	68fb      	ldr	r3, [r7, #12]
 10a:	f04f 0200 	mov.w	r2, #0
 10e:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 110:	68fb      	ldr	r3, [r7, #12]
 112:	f04f 0200 	mov.w	r2, #0
 116:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 118:	68fb      	ldr	r3, [r7, #12]
 11a:	f04f 0201 	mov.w	r2, #1
 11e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 120:	68fb      	ldr	r3, [r7, #12]
 122:	f04f 0200 	mov.w	r2, #0
 126:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 128:	68fb      	ldr	r3, [r7, #12]
 12a:	f04f 32ff 	mov.w	r2, #4294967295
 12e:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 130:	68fb      	ldr	r3, [r7, #12]
 132:	f04f 32ff 	mov.w	r2, #4294967295
 136:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 138:	68fb      	ldr	r3, [r7, #12]
 13a:	f103 0310 	add.w	r3, r3, #16
 13e:	4618      	mov	r0, r3
 140:	f7ff fffe 	bl	0 <vListInitialise>
			140: R_ARM_THM_CALL	vListInitialise
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 144:	68fb      	ldr	r3, [r7, #12]
 146:	f103 0324 	add.w	r3, r3, #36	; 0x24
 14a:	4618      	mov	r0, r3
 14c:	f7ff fffe 	bl	0 <vListInitialise>
			14c: R_ARM_THM_CALL	vListInitialise

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 150:	68f8      	ldr	r0, [r7, #12]
 152:	f04f 0100 	mov.w	r1, #0
 156:	f04f 0200 	mov.w	r2, #0
 15a:	f04f 0300 	mov.w	r3, #0
 15e:	f7ff fffe 	bl	170 <xQueueGenericSend>
			15e: R_ARM_THM_CALL	xQueueGenericSend
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 162:	68fb      	ldr	r3, [r7, #12]
	}
 164:	4618      	mov	r0, r3
 166:	f107 0710 	add.w	r7, r7, #16
 16a:	46bd      	mov	sp, r7
 16c:	bd80      	pop	{r7, pc}
 16e:	bf00      	nop

00000170 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 170:	b580      	push	{r7, lr}
 172:	b088      	sub	sp, #32
 174:	af00      	add	r7, sp, #0
 176:	60f8      	str	r0, [r7, #12]
 178:	60b9      	str	r1, [r7, #8]
 17a:	607a      	str	r2, [r7, #4]
 17c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 17e:	f04f 0300 	mov.w	r3, #0
 182:	61fb      	str	r3, [r7, #28]
 184:	e000      	b.n	188 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 186:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 188:	f7ff fffe 	bl	0 <vPortEnterCritical>
			188: R_ARM_THM_CALL	vPortEnterCritical
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 18c:	68fb      	ldr	r3, [r7, #12]
 18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 190:	68fb      	ldr	r3, [r7, #12]
 192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 194:	429a      	cmp	r2, r3
 196:	d218      	bcs.n	1ca <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 198:	68f8      	ldr	r0, [r7, #12]
 19a:	68b9      	ldr	r1, [r7, #8]
 19c:	683a      	ldr	r2, [r7, #0]
 19e:	f000 f9fd 	bl	59c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1a2:	68fb      	ldr	r3, [r7, #12]
 1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 1a6:	2b00      	cmp	r3, #0
 1a8:	d00a      	beq.n	1c0 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 1aa:	68fb      	ldr	r3, [r7, #12]
 1ac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 1b0:	4618      	mov	r0, r3
 1b2:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			1b2: R_ARM_THM_CALL	xTaskRemoveFromEventList
 1b6:	4603      	mov	r3, r0
 1b8:	2b01      	cmp	r3, #1
 1ba:	d101      	bne.n	1c0 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 1bc:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			1bc: R_ARM_THM_CALL	vPortYieldFromISR
					}
				}

				taskEXIT_CRITICAL();
 1c0:	f7ff fffe 	bl	0 <vPortExitCritical>
			1c0: R_ARM_THM_CALL	vPortExitCritical

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 1c4:	f04f 0301 	mov.w	r3, #1
 1c8:	e05d      	b.n	286 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 1ca:	687b      	ldr	r3, [r7, #4]
 1cc:	2b00      	cmp	r3, #0
 1ce:	d104      	bne.n	1da <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1d0:	f7ff fffe 	bl	0 <vPortExitCritical>
			1d0: R_ARM_THM_CALL	vPortExitCritical

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1d4:	f04f 0300 	mov.w	r3, #0
 1d8:	e055      	b.n	286 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
 1da:	69fb      	ldr	r3, [r7, #28]
 1dc:	2b00      	cmp	r3, #0
 1de:	d107      	bne.n	1f0 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 1e0:	f107 0314 	add.w	r3, r7, #20
 1e4:	4618      	mov	r0, r3
 1e6:	f7ff fffe 	bl	0 <vTaskSetTimeOutState>
			1e6: R_ARM_THM_CALL	vTaskSetTimeOutState
					xEntryTimeSet = pdTRUE;
 1ea:	f04f 0301 	mov.w	r3, #1
 1ee:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 1f0:	f7ff fffe 	bl	0 <vPortExitCritical>
			1f0: R_ARM_THM_CALL	vPortExitCritical

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1f4:	f7ff fffe 	bl	0 <vTaskSuspendAll>
			1f4: R_ARM_THM_CALL	vTaskSuspendAll
		prvLockQueue( pxQueue );
 1f8:	f7ff fffe 	bl	0 <vPortEnterCritical>
			1f8: R_ARM_THM_CALL	vPortEnterCritical
 1fc:	68fb      	ldr	r3, [r7, #12]
 1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 200:	f1b3 3fff 	cmp.w	r3, #4294967295
 204:	d103      	bne.n	20e <xQueueGenericSend+0x9e>
 206:	68fb      	ldr	r3, [r7, #12]
 208:	f04f 0200 	mov.w	r2, #0
 20c:	645a      	str	r2, [r3, #68]	; 0x44
 20e:	68fb      	ldr	r3, [r7, #12]
 210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 212:	f1b3 3fff 	cmp.w	r3, #4294967295
 216:	d103      	bne.n	220 <xQueueGenericSend+0xb0>
 218:	68fb      	ldr	r3, [r7, #12]
 21a:	f04f 0200 	mov.w	r2, #0
 21e:	649a      	str	r2, [r3, #72]	; 0x48
 220:	f7ff fffe 	bl	0 <vPortExitCritical>
			220: R_ARM_THM_CALL	vPortExitCritical

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 224:	f107 0214 	add.w	r2, r7, #20
 228:	f107 0304 	add.w	r3, r7, #4
 22c:	4610      	mov	r0, r2
 22e:	4619      	mov	r1, r3
 230:	f7ff fffe 	bl	0 <xTaskCheckForTimeOut>
			230: R_ARM_THM_CALL	xTaskCheckForTimeOut
 234:	4603      	mov	r3, r0
 236:	2b00      	cmp	r3, #0
 238:	d11e      	bne.n	278 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 23a:	68f8      	ldr	r0, [r7, #12]
 23c:	f000 fab0 	bl	7a0 <prvIsQueueFull>
 240:	4603      	mov	r3, r0
 242:	2b00      	cmp	r3, #0
 244:	d012      	beq.n	26c <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 246:	68fb      	ldr	r3, [r7, #12]
 248:	f103 0210 	add.w	r2, r3, #16
 24c:	687b      	ldr	r3, [r7, #4]
 24e:	4610      	mov	r0, r2
 250:	4619      	mov	r1, r3
 252:	f7ff fffe 	bl	0 <vTaskPlaceOnEventList>
			252: R_ARM_THM_CALL	vTaskPlaceOnEventList
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 256:	68f8      	ldr	r0, [r7, #12]
 258:	f000 fa2a 	bl	6b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 25c:	f7ff fffe 	bl	0 <xTaskResumeAll>
			25c: R_ARM_THM_CALL	xTaskResumeAll
 260:	4603      	mov	r3, r0
 262:	2b00      	cmp	r3, #0
 264:	d18f      	bne.n	186 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 266:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			266: R_ARM_THM_CALL	vPortYieldFromISR
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 26a:	e78d      	b.n	188 <xQueueGenericSend+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 26c:	68f8      	ldr	r0, [r7, #12]
 26e:	f000 fa1f 	bl	6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 272:	f7ff fffe 	bl	0 <xTaskResumeAll>
			272: R_ARM_THM_CALL	xTaskResumeAll
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 276:	e787      	b.n	188 <xQueueGenericSend+0x18>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 278:	68f8      	ldr	r0, [r7, #12]
 27a:	f000 fa19 	bl	6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 27e:	f7ff fffe 	bl	0 <xTaskResumeAll>
			27e: R_ARM_THM_CALL	xTaskResumeAll

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 282:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 286:	4618      	mov	r0, r3
 288:	f107 0720 	add.w	r7, r7, #32
 28c:	46bd      	mov	sp, r7
 28e:	bd80      	pop	{r7, pc}

00000290 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 290:	b580      	push	{r7, lr}
 292:	b086      	sub	sp, #24
 294:	af00      	add	r7, sp, #0
 296:	60f8      	str	r0, [r7, #12]
 298:	60b9      	str	r1, [r7, #8]
 29a:	607a      	str	r2, [r7, #4]
 29c:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 29e:	f04f 0300 	mov.w	r3, #0
 2a2:	613b      	str	r3, [r7, #16]
 2a4:	f04f 0040 	mov.w	r0, #64	; 0x40
 2a8:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 2ac:	68fb      	ldr	r3, [r7, #12]
 2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 2b0:	68fb      	ldr	r3, [r7, #12]
 2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 2b4:	429a      	cmp	r2, r3
 2b6:	d225      	bcs.n	304 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 2b8:	68f8      	ldr	r0, [r7, #12]
 2ba:	68b9      	ldr	r1, [r7, #8]
 2bc:	683a      	ldr	r2, [r7, #0]
 2be:	f000 f96d 	bl	59c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 2c2:	68fb      	ldr	r3, [r7, #12]
 2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 2ca:	d111      	bne.n	2f0 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2cc:	68fb      	ldr	r3, [r7, #12]
 2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 2d0:	2b00      	cmp	r3, #0
 2d2:	d013      	beq.n	2fc <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2d4:	68fb      	ldr	r3, [r7, #12]
 2d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 2da:	4618      	mov	r0, r3
 2dc:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			2dc: R_ARM_THM_CALL	xTaskRemoveFromEventList
 2e0:	4603      	mov	r3, r0
 2e2:	2b00      	cmp	r3, #0
 2e4:	d00a      	beq.n	2fc <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 2e6:	687b      	ldr	r3, [r7, #4]
 2e8:	f04f 0201 	mov.w	r2, #1
 2ec:	601a      	str	r2, [r3, #0]
 2ee:	e005      	b.n	2fc <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 2f0:	68fb      	ldr	r3, [r7, #12]
 2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 2f4:	f103 0201 	add.w	r2, r3, #1
 2f8:	68fb      	ldr	r3, [r7, #12]
 2fa:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 2fc:	f04f 0301 	mov.w	r3, #1
 300:	617b      	str	r3, [r7, #20]
 302:	e002      	b.n	30a <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 304:	f04f 0300 	mov.w	r3, #0
 308:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 30a:	f04f 0000 	mov.w	r0, #0
 30e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 312:	697b      	ldr	r3, [r7, #20]
}
 314:	4618      	mov	r0, r3
 316:	f107 0718 	add.w	r7, r7, #24
 31a:	46bd      	mov	sp, r7
 31c:	bd80      	pop	{r7, pc}
 31e:	bf00      	nop

00000320 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 320:	b580      	push	{r7, lr}
 322:	b088      	sub	sp, #32
 324:	af00      	add	r7, sp, #0
 326:	60f8      	str	r0, [r7, #12]
 328:	60b9      	str	r1, [r7, #8]
 32a:	607a      	str	r2, [r7, #4]
 32c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 32e:	f04f 0300 	mov.w	r3, #0
 332:	61fb      	str	r3, [r7, #28]
 334:	e000      	b.n	338 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 336:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 338:	f7ff fffe 	bl	0 <vPortEnterCritical>
			338: R_ARM_THM_CALL	vPortEnterCritical
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 33c:	68fb      	ldr	r3, [r7, #12]
 33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 340:	2b00      	cmp	r3, #0
 342:	d040      	beq.n	3c6 <xQueueGenericReceive+0xa6>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 344:	68fb      	ldr	r3, [r7, #12]
 346:	68db      	ldr	r3, [r3, #12]
 348:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 34a:	68f8      	ldr	r0, [r7, #12]
 34c:	68b9      	ldr	r1, [r7, #8]
 34e:	f000 f987 	bl	660 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 352:	683b      	ldr	r3, [r7, #0]
 354:	2b00      	cmp	r3, #0
 356:	d11f      	bne.n	398 <xQueueGenericReceive+0x78>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 358:	68fb      	ldr	r3, [r7, #12]
 35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 35c:	f103 32ff 	add.w	r2, r3, #4294967295
 360:	68fb      	ldr	r3, [r7, #12]
 362:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 364:	68fb      	ldr	r3, [r7, #12]
 366:	681b      	ldr	r3, [r3, #0]
 368:	2b00      	cmp	r3, #0
 36a:	d105      	bne.n	378 <xQueueGenericReceive+0x58>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 36c:	f7ff fffe 	bl	0 <xTaskGetCurrentTaskHandle>
			36c: R_ARM_THM_CALL	xTaskGetCurrentTaskHandle
 370:	4603      	mov	r3, r0
 372:	461a      	mov	r2, r3
 374:	68fb      	ldr	r3, [r7, #12]
 376:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 378:	68fb      	ldr	r3, [r7, #12]
 37a:	691b      	ldr	r3, [r3, #16]
 37c:	2b00      	cmp	r3, #0
 37e:	d01d      	beq.n	3bc <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 380:	68fb      	ldr	r3, [r7, #12]
 382:	f103 0310 	add.w	r3, r3, #16
 386:	4618      	mov	r0, r3
 388:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			388: R_ARM_THM_CALL	xTaskRemoveFromEventList
 38c:	4603      	mov	r3, r0
 38e:	2b01      	cmp	r3, #1
 390:	d114      	bne.n	3bc <xQueueGenericReceive+0x9c>
						{
							portYIELD_WITHIN_API();
 392:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			392: R_ARM_THM_CALL	vPortYieldFromISR
 396:	e011      	b.n	3bc <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 398:	68fb      	ldr	r3, [r7, #12]
 39a:	69ba      	ldr	r2, [r7, #24]
 39c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 39e:	68fb      	ldr	r3, [r7, #12]
 3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 3a2:	2b00      	cmp	r3, #0
 3a4:	d00a      	beq.n	3bc <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 3a6:	68fb      	ldr	r3, [r7, #12]
 3a8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 3ac:	4618      	mov	r0, r3
 3ae:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			3ae: R_ARM_THM_CALL	xTaskRemoveFromEventList
 3b2:	4603      	mov	r3, r0
 3b4:	2b00      	cmp	r3, #0
 3b6:	d001      	beq.n	3bc <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 3b8:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			3b8: R_ARM_THM_CALL	vPortYieldFromISR
						}
					}

				}

				taskEXIT_CRITICAL();
 3bc:	f7ff fffe 	bl	0 <vPortExitCritical>
			3bc: R_ARM_THM_CALL	vPortExitCritical
				return pdPASS;
 3c0:	f04f 0301 	mov.w	r3, #1
 3c4:	e06b      	b.n	49e <xQueueGenericReceive+0x17e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 3c6:	687b      	ldr	r3, [r7, #4]
 3c8:	2b00      	cmp	r3, #0
 3ca:	d104      	bne.n	3d6 <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 3cc:	f7ff fffe 	bl	0 <vPortExitCritical>
			3cc: R_ARM_THM_CALL	vPortExitCritical
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 3d0:	f04f 0300 	mov.w	r3, #0
 3d4:	e063      	b.n	49e <xQueueGenericReceive+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
 3d6:	69fb      	ldr	r3, [r7, #28]
 3d8:	2b00      	cmp	r3, #0
 3da:	d107      	bne.n	3ec <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 3dc:	f107 0310 	add.w	r3, r7, #16
 3e0:	4618      	mov	r0, r3
 3e2:	f7ff fffe 	bl	0 <vTaskSetTimeOutState>
			3e2: R_ARM_THM_CALL	vTaskSetTimeOutState
					xEntryTimeSet = pdTRUE;
 3e6:	f04f 0301 	mov.w	r3, #1
 3ea:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 3ec:	f7ff fffe 	bl	0 <vPortExitCritical>
			3ec: R_ARM_THM_CALL	vPortExitCritical

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 3f0:	f7ff fffe 	bl	0 <vTaskSuspendAll>
			3f0: R_ARM_THM_CALL	vTaskSuspendAll
		prvLockQueue( pxQueue );
 3f4:	f7ff fffe 	bl	0 <vPortEnterCritical>
			3f4: R_ARM_THM_CALL	vPortEnterCritical
 3f8:	68fb      	ldr	r3, [r7, #12]
 3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 400:	d103      	bne.n	40a <xQueueGenericReceive+0xea>
 402:	68fb      	ldr	r3, [r7, #12]
 404:	f04f 0200 	mov.w	r2, #0
 408:	645a      	str	r2, [r3, #68]	; 0x44
 40a:	68fb      	ldr	r3, [r7, #12]
 40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 412:	d103      	bne.n	41c <xQueueGenericReceive+0xfc>
 414:	68fb      	ldr	r3, [r7, #12]
 416:	f04f 0200 	mov.w	r2, #0
 41a:	649a      	str	r2, [r3, #72]	; 0x48
 41c:	f7ff fffe 	bl	0 <vPortExitCritical>
			41c: R_ARM_THM_CALL	vPortExitCritical

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 420:	f107 0210 	add.w	r2, r7, #16
 424:	f107 0304 	add.w	r3, r7, #4
 428:	4610      	mov	r0, r2
 42a:	4619      	mov	r1, r3
 42c:	f7ff fffe 	bl	0 <xTaskCheckForTimeOut>
			42c: R_ARM_THM_CALL	xTaskCheckForTimeOut
 430:	4603      	mov	r3, r0
 432:	2b00      	cmp	r3, #0
 434:	d12c      	bne.n	490 <xQueueGenericReceive+0x170>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 436:	68f8      	ldr	r0, [r7, #12]
 438:	f000 f98a 	bl	750 <prvIsQueueEmpty>
 43c:	4603      	mov	r3, r0
 43e:	2b00      	cmp	r3, #0
 440:	d020      	beq.n	484 <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 442:	68fb      	ldr	r3, [r7, #12]
 444:	681b      	ldr	r3, [r3, #0]
 446:	2b00      	cmp	r3, #0
 448:	d108      	bne.n	45c <xQueueGenericReceive+0x13c>
					{
						portENTER_CRITICAL();
 44a:	f7ff fffe 	bl	0 <vPortEnterCritical>
			44a: R_ARM_THM_CALL	vPortEnterCritical
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 44e:	68fb      	ldr	r3, [r7, #12]
 450:	685b      	ldr	r3, [r3, #4]
 452:	4618      	mov	r0, r3
 454:	f7ff fffe 	bl	0 <vTaskPriorityInherit>
			454: R_ARM_THM_CALL	vTaskPriorityInherit
						}
						portEXIT_CRITICAL();
 458:	f7ff fffe 	bl	0 <vPortExitCritical>
			458: R_ARM_THM_CALL	vPortExitCritical
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 45c:	68fb      	ldr	r3, [r7, #12]
 45e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 462:	687b      	ldr	r3, [r7, #4]
 464:	4610      	mov	r0, r2
 466:	4619      	mov	r1, r3
 468:	f7ff fffe 	bl	0 <vTaskPlaceOnEventList>
			468: R_ARM_THM_CALL	vTaskPlaceOnEventList
				prvUnlockQueue( pxQueue );
 46c:	68f8      	ldr	r0, [r7, #12]
 46e:	f000 f91f 	bl	6b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 472:	f7ff fffe 	bl	0 <xTaskResumeAll>
			472: R_ARM_THM_CALL	xTaskResumeAll
 476:	4603      	mov	r3, r0
 478:	2b00      	cmp	r3, #0
 47a:	f47f af5c 	bne.w	336 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
 47e:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			47e: R_ARM_THM_CALL	vPortYieldFromISR
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 482:	e759      	b.n	338 <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 484:	68f8      	ldr	r0, [r7, #12]
 486:	f000 f913 	bl	6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 48a:	f7ff fffe 	bl	0 <xTaskResumeAll>
			48a: R_ARM_THM_CALL	xTaskResumeAll
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 48e:	e753      	b.n	338 <xQueueGenericReceive+0x18>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 490:	68f8      	ldr	r0, [r7, #12]
 492:	f000 f90d 	bl	6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 496:	f7ff fffe 	bl	0 <xTaskResumeAll>
			496: R_ARM_THM_CALL	xTaskResumeAll
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 49a:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 49e:	4618      	mov	r0, r3
 4a0:	f107 0720 	add.w	r7, r7, #32
 4a4:	46bd      	mov	sp, r7
 4a6:	bd80      	pop	{r7, pc}

000004a8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
 4a8:	b580      	push	{r7, lr}
 4aa:	b086      	sub	sp, #24
 4ac:	af00      	add	r7, sp, #0
 4ae:	60f8      	str	r0, [r7, #12]
 4b0:	60b9      	str	r1, [r7, #8]
 4b2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4b4:	f04f 0300 	mov.w	r3, #0
 4b8:	613b      	str	r3, [r7, #16]
 4ba:	f04f 0040 	mov.w	r0, #64	; 0x40
 4be:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 4c2:	68fb      	ldr	r3, [r7, #12]
 4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 4c6:	2b00      	cmp	r3, #0
 4c8:	d02a      	beq.n	520 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 4ca:	68f8      	ldr	r0, [r7, #12]
 4cc:	68b9      	ldr	r1, [r7, #8]
 4ce:	f000 f8c7 	bl	660 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 4d2:	68fb      	ldr	r3, [r7, #12]
 4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 4d6:	f103 32ff 	add.w	r2, r3, #4294967295
 4da:	68fb      	ldr	r3, [r7, #12]
 4dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 4de:	68fb      	ldr	r3, [r7, #12]
 4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 4e6:	d111      	bne.n	50c <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 4e8:	68fb      	ldr	r3, [r7, #12]
 4ea:	691b      	ldr	r3, [r3, #16]
 4ec:	2b00      	cmp	r3, #0
 4ee:	d013      	beq.n	518 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 4f0:	68fb      	ldr	r3, [r7, #12]
 4f2:	f103 0310 	add.w	r3, r3, #16
 4f6:	4618      	mov	r0, r3
 4f8:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			4f8: R_ARM_THM_CALL	xTaskRemoveFromEventList
 4fc:	4603      	mov	r3, r0
 4fe:	2b00      	cmp	r3, #0
 500:	d00a      	beq.n	518 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
 502:	687b      	ldr	r3, [r7, #4]
 504:	f04f 0201 	mov.w	r2, #1
 508:	601a      	str	r2, [r3, #0]
 50a:	e005      	b.n	518 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 50c:	68fb      	ldr	r3, [r7, #12]
 50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 510:	f103 0201 	add.w	r2, r3, #1
 514:	68fb      	ldr	r3, [r7, #12]
 516:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 518:	f04f 0301 	mov.w	r3, #1
 51c:	617b      	str	r3, [r7, #20]
 51e:	e002      	b.n	526 <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
 520:	f04f 0300 	mov.w	r3, #0
 524:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 526:	f04f 0000 	mov.w	r0, #0
 52a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 52e:	697b      	ldr	r3, [r7, #20]
}
 530:	4618      	mov	r0, r3
 532:	f107 0718 	add.w	r7, r7, #24
 536:	46bd      	mov	sp, r7
 538:	bd80      	pop	{r7, pc}
 53a:	bf00      	nop

0000053c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
 53c:	b580      	push	{r7, lr}
 53e:	b084      	sub	sp, #16
 540:	af00      	add	r7, sp, #0
 542:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 544:	f7ff fffe 	bl	0 <vPortEnterCritical>
			544: R_ARM_THM_CALL	vPortEnterCritical
		uxReturn = pxQueue->uxMessagesWaiting;
 548:	687b      	ldr	r3, [r7, #4]
 54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 54c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 54e:	f7ff fffe 	bl	0 <vPortExitCritical>
			54e: R_ARM_THM_CALL	vPortExitCritical

	return uxReturn;
 552:	68fb      	ldr	r3, [r7, #12]
}
 554:	4618      	mov	r0, r3
 556:	f107 0710 	add.w	r7, r7, #16
 55a:	46bd      	mov	sp, r7
 55c:	bd80      	pop	{r7, pc}
 55e:	bf00      	nop

00000560 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
 560:	b480      	push	{r7}
 562:	b085      	sub	sp, #20
 564:	af00      	add	r7, sp, #0
 566:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
 568:	687b      	ldr	r3, [r7, #4]
 56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 56c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 56e:	68fb      	ldr	r3, [r7, #12]
}
 570:	4618      	mov	r0, r3
 572:	f107 0714 	add.w	r7, r7, #20
 576:	46bd      	mov	sp, r7
 578:	bc80      	pop	{r7}
 57a:	4770      	bx	lr

0000057c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
 57c:	b580      	push	{r7, lr}
 57e:	b082      	sub	sp, #8
 580:	af00      	add	r7, sp, #0
 582:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
 584:	687b      	ldr	r3, [r7, #4]
 586:	681b      	ldr	r3, [r3, #0]
 588:	4618      	mov	r0, r3
 58a:	f7ff fffe 	bl	0 <vPortFree>
			58a: R_ARM_THM_CALL	vPortFree
	vPortFree( pxQueue );
 58e:	6878      	ldr	r0, [r7, #4]
 590:	f7ff fffe 	bl	0 <vPortFree>
			590: R_ARM_THM_CALL	vPortFree
}
 594:	f107 0708 	add.w	r7, r7, #8
 598:	46bd      	mov	sp, r7
 59a:	bd80      	pop	{r7, pc}

0000059c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 59c:	b580      	push	{r7, lr}
 59e:	b084      	sub	sp, #16
 5a0:	af00      	add	r7, sp, #0
 5a2:	60f8      	str	r0, [r7, #12]
 5a4:	60b9      	str	r1, [r7, #8]
 5a6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 5a8:	68fb      	ldr	r3, [r7, #12]
 5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 5ac:	2b00      	cmp	r3, #0
 5ae:	d10d      	bne.n	5cc <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 5b0:	68fb      	ldr	r3, [r7, #12]
 5b2:	681b      	ldr	r3, [r3, #0]
 5b4:	2b00      	cmp	r3, #0
 5b6:	d148      	bne.n	64a <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 5b8:	68fb      	ldr	r3, [r7, #12]
 5ba:	685b      	ldr	r3, [r3, #4]
 5bc:	4618      	mov	r0, r3
 5be:	f7ff fffe 	bl	0 <vTaskPriorityDisinherit>
			5be: R_ARM_THM_CALL	vTaskPriorityDisinherit
				pxQueue->pxMutexHolder = NULL;
 5c2:	68fb      	ldr	r3, [r7, #12]
 5c4:	f04f 0200 	mov.w	r2, #0
 5c8:	605a      	str	r2, [r3, #4]
 5ca:	e03e      	b.n	64a <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 5cc:	687b      	ldr	r3, [r7, #4]
 5ce:	2b00      	cmp	r3, #0
 5d0:	d11a      	bne.n	608 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 5d2:	68fb      	ldr	r3, [r7, #12]
 5d4:	689a      	ldr	r2, [r3, #8]
 5d6:	68fb      	ldr	r3, [r7, #12]
 5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 5da:	4610      	mov	r0, r2
 5dc:	68b9      	ldr	r1, [r7, #8]
 5de:	461a      	mov	r2, r3
 5e0:	f7ff fffe 	bl	0 <memcpy>
			5e0: R_ARM_THM_CALL	memcpy
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 5e4:	68fb      	ldr	r3, [r7, #12]
 5e6:	689a      	ldr	r2, [r3, #8]
 5e8:	68fb      	ldr	r3, [r7, #12]
 5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 5ec:	18d2      	adds	r2, r2, r3
 5ee:	68fb      	ldr	r3, [r7, #12]
 5f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 5f2:	68fb      	ldr	r3, [r7, #12]
 5f4:	689a      	ldr	r2, [r3, #8]
 5f6:	68fb      	ldr	r3, [r7, #12]
 5f8:	685b      	ldr	r3, [r3, #4]
 5fa:	429a      	cmp	r2, r3
 5fc:	d325      	bcc.n	64a <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 5fe:	68fb      	ldr	r3, [r7, #12]
 600:	681a      	ldr	r2, [r3, #0]
 602:	68fb      	ldr	r3, [r7, #12]
 604:	609a      	str	r2, [r3, #8]
 606:	e020      	b.n	64a <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 608:	68fb      	ldr	r3, [r7, #12]
 60a:	68da      	ldr	r2, [r3, #12]
 60c:	68fb      	ldr	r3, [r7, #12]
 60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 610:	4610      	mov	r0, r2
 612:	68b9      	ldr	r1, [r7, #8]
 614:	461a      	mov	r2, r3
 616:	f7ff fffe 	bl	0 <memcpy>
			616: R_ARM_THM_CALL	memcpy
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 61a:	68fb      	ldr	r3, [r7, #12]
 61c:	68da      	ldr	r2, [r3, #12]
 61e:	68fb      	ldr	r3, [r7, #12]
 620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 622:	f1c3 0300 	rsb	r3, r3, #0
 626:	18d2      	adds	r2, r2, r3
 628:	68fb      	ldr	r3, [r7, #12]
 62a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 62c:	68fb      	ldr	r3, [r7, #12]
 62e:	68da      	ldr	r2, [r3, #12]
 630:	68fb      	ldr	r3, [r7, #12]
 632:	681b      	ldr	r3, [r3, #0]
 634:	429a      	cmp	r2, r3
 636:	d208      	bcs.n	64a <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 638:	68fb      	ldr	r3, [r7, #12]
 63a:	685a      	ldr	r2, [r3, #4]
 63c:	68fb      	ldr	r3, [r7, #12]
 63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 640:	f1c3 0300 	rsb	r3, r3, #0
 644:	18d2      	adds	r2, r2, r3
 646:	68fb      	ldr	r3, [r7, #12]
 648:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 64a:	68fb      	ldr	r3, [r7, #12]
 64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 64e:	f103 0201 	add.w	r2, r3, #1
 652:	68fb      	ldr	r3, [r7, #12]
 654:	639a      	str	r2, [r3, #56]	; 0x38
}
 656:	f107 0710 	add.w	r7, r7, #16
 65a:	46bd      	mov	sp, r7
 65c:	bd80      	pop	{r7, pc}
 65e:	bf00      	nop

00000660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 660:	b580      	push	{r7, lr}
 662:	b082      	sub	sp, #8
 664:	af00      	add	r7, sp, #0
 666:	6078      	str	r0, [r7, #4]
 668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 66a:	687b      	ldr	r3, [r7, #4]
 66c:	681b      	ldr	r3, [r3, #0]
 66e:	2b00      	cmp	r3, #0
 670:	d019      	beq.n	6a6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 672:	687b      	ldr	r3, [r7, #4]
 674:	68da      	ldr	r2, [r3, #12]
 676:	687b      	ldr	r3, [r7, #4]
 678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 67a:	18d2      	adds	r2, r2, r3
 67c:	687b      	ldr	r3, [r7, #4]
 67e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 680:	687b      	ldr	r3, [r7, #4]
 682:	68da      	ldr	r2, [r3, #12]
 684:	687b      	ldr	r3, [r7, #4]
 686:	685b      	ldr	r3, [r3, #4]
 688:	429a      	cmp	r2, r3
 68a:	d303      	bcc.n	694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 68c:	687b      	ldr	r3, [r7, #4]
 68e:	681a      	ldr	r2, [r3, #0]
 690:	687b      	ldr	r3, [r7, #4]
 692:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 694:	687b      	ldr	r3, [r7, #4]
 696:	68da      	ldr	r2, [r3, #12]
 698:	687b      	ldr	r3, [r7, #4]
 69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 69c:	6838      	ldr	r0, [r7, #0]
 69e:	4611      	mov	r1, r2
 6a0:	461a      	mov	r2, r3
 6a2:	f7ff fffe 	bl	0 <memcpy>
			6a2: R_ARM_THM_CALL	memcpy
	}
}
 6a6:	f107 0708 	add.w	r7, r7, #8
 6aa:	46bd      	mov	sp, r7
 6ac:	bd80      	pop	{r7, pc}
 6ae:	bf00      	nop

000006b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 6b0:	b580      	push	{r7, lr}
 6b2:	b082      	sub	sp, #8
 6b4:	af00      	add	r7, sp, #0
 6b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 6b8:	f7ff fffe 	bl	0 <vPortEnterCritical>
			6b8: R_ARM_THM_CALL	vPortEnterCritical
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 6bc:	e014      	b.n	6e8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 6be:	687b      	ldr	r3, [r7, #4]
 6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 6c2:	2b00      	cmp	r3, #0
 6c4:	d015      	beq.n	6f2 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 6c6:	687b      	ldr	r3, [r7, #4]
 6c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 6cc:	4618      	mov	r0, r3
 6ce:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			6ce: R_ARM_THM_CALL	xTaskRemoveFromEventList
 6d2:	4603      	mov	r3, r0
 6d4:	2b00      	cmp	r3, #0
 6d6:	d001      	beq.n	6dc <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 6d8:	f7ff fffe 	bl	0 <vTaskMissedYield>
			6d8: R_ARM_THM_CALL	vTaskMissedYield
				}

				--( pxQueue->xTxLock );
 6dc:	687b      	ldr	r3, [r7, #4]
 6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 6e0:	f103 32ff 	add.w	r2, r3, #4294967295
 6e4:	687b      	ldr	r3, [r7, #4]
 6e6:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 6e8:	687b      	ldr	r3, [r7, #4]
 6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 6ec:	2b00      	cmp	r3, #0
 6ee:	dce6      	bgt.n	6be <prvUnlockQueue+0xe>
 6f0:	e000      	b.n	6f4 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 6f2:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 6f4:	687b      	ldr	r3, [r7, #4]
 6f6:	f04f 32ff 	mov.w	r2, #4294967295
 6fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 6fc:	f7ff fffe 	bl	0 <vPortExitCritical>
			6fc: R_ARM_THM_CALL	vPortExitCritical

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 700:	f7ff fffe 	bl	0 <vPortEnterCritical>
			700: R_ARM_THM_CALL	vPortEnterCritical
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 704:	e014      	b.n	730 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 706:	687b      	ldr	r3, [r7, #4]
 708:	691b      	ldr	r3, [r3, #16]
 70a:	2b00      	cmp	r3, #0
 70c:	d015      	beq.n	73a <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 70e:	687b      	ldr	r3, [r7, #4]
 710:	f103 0310 	add.w	r3, r3, #16
 714:	4618      	mov	r0, r3
 716:	f7ff fffe 	bl	0 <xTaskRemoveFromEventList>
			716: R_ARM_THM_CALL	xTaskRemoveFromEventList
 71a:	4603      	mov	r3, r0
 71c:	2b00      	cmp	r3, #0
 71e:	d001      	beq.n	724 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 720:	f7ff fffe 	bl	0 <vTaskMissedYield>
			720: R_ARM_THM_CALL	vTaskMissedYield
				}

				--( pxQueue->xRxLock );
 724:	687b      	ldr	r3, [r7, #4]
 726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 728:	f103 32ff 	add.w	r2, r3, #4294967295
 72c:	687b      	ldr	r3, [r7, #4]
 72e:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 730:	687b      	ldr	r3, [r7, #4]
 732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 734:	2b00      	cmp	r3, #0
 736:	dce6      	bgt.n	706 <prvUnlockQueue+0x56>
 738:	e000      	b.n	73c <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 73a:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 73c:	687b      	ldr	r3, [r7, #4]
 73e:	f04f 32ff 	mov.w	r2, #4294967295
 742:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 744:	f7ff fffe 	bl	0 <vPortExitCritical>
			744: R_ARM_THM_CALL	vPortExitCritical
}
 748:	f107 0708 	add.w	r7, r7, #8
 74c:	46bd      	mov	sp, r7
 74e:	bd80      	pop	{r7, pc}

00000750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 750:	b580      	push	{r7, lr}
 752:	b084      	sub	sp, #16
 754:	af00      	add	r7, sp, #0
 756:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 758:	f7ff fffe 	bl	0 <vPortEnterCritical>
			758: R_ARM_THM_CALL	vPortEnterCritical
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 75c:	687b      	ldr	r3, [r7, #4]
 75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 760:	2b00      	cmp	r3, #0
 762:	bf14      	ite	ne
 764:	2300      	movne	r3, #0
 766:	2301      	moveq	r3, #1
 768:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 76a:	f7ff fffe 	bl	0 <vPortExitCritical>
			76a: R_ARM_THM_CALL	vPortExitCritical

	return xReturn;
 76e:	68fb      	ldr	r3, [r7, #12]
}
 770:	4618      	mov	r0, r3
 772:	f107 0710 	add.w	r7, r7, #16
 776:	46bd      	mov	sp, r7
 778:	bd80      	pop	{r7, pc}
 77a:	bf00      	nop

0000077c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
 77c:	b480      	push	{r7}
 77e:	b085      	sub	sp, #20
 780:	af00      	add	r7, sp, #0
 782:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 784:	687b      	ldr	r3, [r7, #4]
 786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 788:	2b00      	cmp	r3, #0
 78a:	bf14      	ite	ne
 78c:	2300      	movne	r3, #0
 78e:	2301      	moveq	r3, #1
 790:	60fb      	str	r3, [r7, #12]

	return xReturn;
 792:	68fb      	ldr	r3, [r7, #12]
}
 794:	4618      	mov	r0, r3
 796:	f107 0714 	add.w	r7, r7, #20
 79a:	46bd      	mov	sp, r7
 79c:	bc80      	pop	{r7}
 79e:	4770      	bx	lr

000007a0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 7a0:	b580      	push	{r7, lr}
 7a2:	b084      	sub	sp, #16
 7a4:	af00      	add	r7, sp, #0
 7a6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 7a8:	f7ff fffe 	bl	0 <vPortEnterCritical>
			7a8: R_ARM_THM_CALL	vPortEnterCritical
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 7ac:	687b      	ldr	r3, [r7, #4]
 7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 7b0:	687b      	ldr	r3, [r7, #4]
 7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 7b4:	429a      	cmp	r2, r3
 7b6:	bf14      	ite	ne
 7b8:	2300      	movne	r3, #0
 7ba:	2301      	moveq	r3, #1
 7bc:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 7be:	f7ff fffe 	bl	0 <vPortExitCritical>
			7be: R_ARM_THM_CALL	vPortExitCritical

	return xReturn;
 7c2:	68fb      	ldr	r3, [r7, #12]
}
 7c4:	4618      	mov	r0, r3
 7c6:	f107 0710 	add.w	r7, r7, #16
 7ca:	46bd      	mov	sp, r7
 7cc:	bd80      	pop	{r7, pc}
 7ce:	bf00      	nop

000007d0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
 7d0:	b480      	push	{r7}
 7d2:	b085      	sub	sp, #20
 7d4:	af00      	add	r7, sp, #0
 7d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 7d8:	687b      	ldr	r3, [r7, #4]
 7da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 7dc:	687b      	ldr	r3, [r7, #4]
 7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 7e0:	429a      	cmp	r2, r3
 7e2:	bf14      	ite	ne
 7e4:	2300      	movne	r3, #0
 7e6:	2301      	moveq	r3, #1
 7e8:	60fb      	str	r3, [r7, #12]

	return xReturn;
 7ea:	68fb      	ldr	r3, [r7, #12]
}
 7ec:	4618      	mov	r0, r3
 7ee:	f107 0714 	add.w	r7, r7, #20
 7f2:	46bd      	mov	sp, r7
 7f4:	bc80      	pop	{r7}
 7f6:	4770      	bx	lr

tasks.c.obj:     file format elf32-littlearm
rw-rw-rw- 0/0  71548 Jul 30 19:07 2021 tasks.c.obj
architecture: arm, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000
private flags = 5000000: [Version5 EABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010f4  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  00001128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  00000000  00000000  0000112c  2**2
                  ALLOC
  3 .debug_abbrev 00000182  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e1e  00000000  00000000  000012ae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000009bd  00000000  00000000  000020cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_macinfo 0000ac53  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .rodata       00000008  00000000  00000000  0000d6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_loc    000007b0  00000000  00000000  0000d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000002ab  00000000  00000000  0000de94  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubtypes 0000010c  00000000  00000000  0000e13f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000020  00000000  00000000  0000e24b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_str    000008ef  00000000  00000000  0000e26b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002b  00000000  00000000  0000eb5a  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  0000eb85  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000460  00000000  00000000  0000ebb8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000004 l       .bss	00000000 pxReadyTasksLists
0000007c l       .bss	00000000 xDelayedTaskList1
00000090 l       .bss	00000000 xDelayedTaskList2
000000a4 l       .bss	00000000 pxDelayedTaskList
000000a8 l       .bss	00000000 pxOverflowDelayedTaskList
000000ac l       .bss	00000000 xPendingReadyList
000000c0 l       .bss	00000000 xTasksWaitingTermination
000000d4 l       .bss	00000000 uxTasksDeleted
000000d8 l       .bss	00000000 xSuspendedTaskList
000000ec l       .bss	00000000 uxCurrentNumberOfTasks
000000f0 l       .bss	00000000 xTickCount
000000f4 l       .bss	00000000 uxTopUsedPriority
000000f8 l       .bss	00000000 uxTopReadyPriority
000000fc l       .bss	00000000 xSchedulerRunning
00000100 l       .bss	00000000 uxSchedulerSuspended
00000104 l       .bss	00000000 uxMissedTicks
00000108 l       .bss	00000000 xMissedYield
0000010c l       .bss	00000000 xNumOfOverflows
00000110 l       .bss	00000000 uxTCBNumber
00000000 l     O .data	00000004 xNextTaskUnblockTime
00000e94 l     F .text	00000072 prvAllocateTCBAndStack
00000ca8 l     F .text	0000007c prvInitialiseTCBVariables
00000d24 l     F .text	00000088 prvInitialiseTaskLists
00000e24 l     F .text	00000070 prvAddCurrentTaskToDelayedList
00000000 l    d  .rodata	00000000 .rodata
00000c98 l     F .text	0000000e prvIdleTask
00000dac l     F .text	00000078 prvCheckTasksWaitingTermination
00000f78 l     F .text	00000020 prvDeleteTCB
00000f08 l     F .text	00000038 usTaskCheckFreeStackSpace
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 g     O .bss	00000004 pxCurrentTCB
00000000 g     F .text	00000160 xTaskGenericCreate
00000000         *UND*	00000000 pxPortInitialiseStack
00000000         *UND*	00000000 vPortEnterCritical
00000000         *UND*	00000000 vListInsertEnd
00000000         *UND*	00000000 vPortExitCritical
00000000         *UND*	00000000 vPortYieldFromISR
00000160 g     F .text	000000a4 vTaskDelete
00000000         *UND*	00000000 vListRemove
00000204 g     F .text	000000a0 vTaskDelayUntil
00000724 g     F .text	0000001c vTaskSuspendAll
00000740 g     F .text	00000114 xTaskResumeAll
000002a4 g     F .text	00000058 vTaskDelay
000002fc g     F .text	00000038 uxTaskPriorityGet
00000334 g     F .text	00000114 vTaskPrioritySet
00000448 g     F .text	000000a4 vTaskSuspend
000009fc g     F .text	000000a8 vTaskSwitchContext
000004ec g     F .text	0000004c xTaskIsTaskSuspended
00000538 g     F .text	0000009c vTaskResume
000005d4 g     F .text	000000c4 xTaskResumeFromISR
00000698 g     F .text	0000006c vTaskStartScheduler
00000000         *UND*	00000000 xPortStartScheduler
00000704 g     F .text	00000020 vTaskEndScheduler
00000000         *UND*	00000000 vPortEndScheduler
000008c0 g     F .text	0000013c vTaskIncrementTick
00000854 g     F .text	00000024 xTaskGetTickCount
00000878 g     F .text	00000034 xTaskGetTickCountFromISR
000008ac g     F .text	00000014 uxTaskGetNumberOfTasks
00000aa4 g     F .text	00000068 vTaskPlaceOnEventList
00000000         *UND*	00000000 vListInsert
00000b0c g     F .text	000000b4 xTaskRemoveFromEventList
00000bc0 g     F .text	0000002c vTaskSetTimeOutState
00000bec g     F .text	00000094 xTaskCheckForTimeOut
00000c80 g     F .text	00000018 vTaskMissedYield
00000000         *UND*	00000000 strncpy
00000000         *UND*	00000000 vListInitialiseItem
00000000         *UND*	00000000 vListInitialise
00000000         *UND*	00000000 pvPortMalloc
00000000         *UND*	00000000 vPortFree
00000000         *UND*	00000000 memset
00000f40 g     F .text	00000038 uxTaskGetStackHighWaterMark
00000f98 g     F .text	00000020 xTaskGetCurrentTaskHandle
00000fb8 g     F .text	000000b4 vTaskPriorityInherit
0000106c g     F .text	00000088 vTaskPriorityDisinherit



Disassembly of section .text:

00000000 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af02      	add	r7, sp, #8
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	603b      	str	r3, [r7, #0]
       c:	4613      	mov	r3, r2
       e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
      10:	88fb      	ldrh	r3, [r7, #6]
      12:	4618      	mov	r0, r3
      14:	6b39      	ldr	r1, [r7, #48]	; 0x30
      16:	f000 ff3d 	bl	e94 <prvAllocateTCBAndStack>
      1a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
      1c:	69bb      	ldr	r3, [r7, #24]
      1e:	2b00      	cmp	r3, #0
      20:	d078      	beq.n	114 <xTaskGenericCreate+0x114>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
      22:	69bb      	ldr	r3, [r7, #24]
      24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      26:	88fb      	ldrh	r3, [r7, #6]
      28:	f103 33ff 	add.w	r3, r3, #4294967295
      2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
      30:	18d3      	adds	r3, r2, r3
      32:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
      34:	697b      	ldr	r3, [r7, #20]
      36:	f023 0307 	bic.w	r3, r3, #7
      3a:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
      3c:	88fb      	ldrh	r3, [r7, #6]
      3e:	9300      	str	r3, [sp, #0]
      40:	69b8      	ldr	r0, [r7, #24]
      42:	68b9      	ldr	r1, [r7, #8]
      44:	6aba      	ldr	r2, [r7, #40]	; 0x28
      46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      48:	f000 fe2e 	bl	ca8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
      4c:	6978      	ldr	r0, [r7, #20]
      4e:	68f9      	ldr	r1, [r7, #12]
      50:	683a      	ldr	r2, [r7, #0]
      52:	f7ff fffe 	bl	0 <pxPortInitialiseStack>
			52: R_ARM_THM_CALL	pxPortInitialiseStack
      56:	4603      	mov	r3, r0
      58:	461a      	mov	r2, r3
      5a:	69bb      	ldr	r3, [r7, #24]
      5c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
      5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      60:	2b00      	cmp	r3, #0
      62:	d002      	beq.n	6a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
      64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      66:	69ba      	ldr	r2, [r7, #24]
      68:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
      6a:	f7ff fffe 	bl	0 <vPortEnterCritical>
			6a: R_ARM_THM_CALL	vPortEnterCritical
		{
			uxCurrentNumberOfTasks++;
      6e:	4b35      	ldr	r3, [pc, #212]	; (144 <xTaskGenericCreate+0x144>)
      70:	681b      	ldr	r3, [r3, #0]
      72:	f103 0201 	add.w	r2, r3, #1
      76:	4b33      	ldr	r3, [pc, #204]	; (144 <xTaskGenericCreate+0x144>)
      78:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
      7a:	4b33      	ldr	r3, [pc, #204]	; (148 <xTaskGenericCreate+0x148>)
      7c:	681b      	ldr	r3, [r3, #0]
      7e:	2b00      	cmp	r3, #0
      80:	d109      	bne.n	96 <xTaskGenericCreate+0x96>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
      82:	4b31      	ldr	r3, [pc, #196]	; (148 <xTaskGenericCreate+0x148>)
      84:	69ba      	ldr	r2, [r7, #24]
      86:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
      88:	4b2e      	ldr	r3, [pc, #184]	; (144 <xTaskGenericCreate+0x144>)
      8a:	681b      	ldr	r3, [r3, #0]
      8c:	2b01      	cmp	r3, #1
      8e:	d10f      	bne.n	b0 <xTaskGenericCreate+0xb0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
      90:	f000 fe48 	bl	d24 <prvInitialiseTaskLists>
      94:	e00c      	b.n	b0 <xTaskGenericCreate+0xb0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
      96:	4b2d      	ldr	r3, [pc, #180]	; (14c <xTaskGenericCreate+0x14c>)
      98:	681b      	ldr	r3, [r3, #0]
      9a:	2b00      	cmp	r3, #0
      9c:	d108      	bne.n	b0 <xTaskGenericCreate+0xb0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
      9e:	4b2a      	ldr	r3, [pc, #168]	; (148 <xTaskGenericCreate+0x148>)
      a0:	681b      	ldr	r3, [r3, #0]
      a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
      a6:	429a      	cmp	r2, r3
      a8:	d802      	bhi.n	b0 <xTaskGenericCreate+0xb0>
					{
						pxCurrentTCB = pxNewTCB;
      aa:	4b27      	ldr	r3, [pc, #156]	; (148 <xTaskGenericCreate+0x148>)
      ac:	69ba      	ldr	r2, [r7, #24]
      ae:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
      b0:	69bb      	ldr	r3, [r7, #24]
      b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      b4:	4b26      	ldr	r3, [pc, #152]	; (150 <xTaskGenericCreate+0x150>)
      b6:	681b      	ldr	r3, [r3, #0]
      b8:	429a      	cmp	r2, r3
      ba:	d903      	bls.n	c4 <xTaskGenericCreate+0xc4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
      bc:	69bb      	ldr	r3, [r7, #24]
      be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      c0:	4b23      	ldr	r3, [pc, #140]	; (150 <xTaskGenericCreate+0x150>)
      c2:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
			}
			#endif
			uxTCBNumber++;
      c4:	4b23      	ldr	r3, [pc, #140]	; (154 <xTaskGenericCreate+0x154>)
      c6:	681b      	ldr	r3, [r3, #0]
      c8:	f103 0201 	add.w	r2, r3, #1
      cc:	4b21      	ldr	r3, [pc, #132]	; (154 <xTaskGenericCreate+0x154>)
      ce:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
      d0:	69bb      	ldr	r3, [r7, #24]
      d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      d4:	4b20      	ldr	r3, [pc, #128]	; (158 <xTaskGenericCreate+0x158>)
      d6:	681b      	ldr	r3, [r3, #0]
      d8:	429a      	cmp	r2, r3
      da:	d903      	bls.n	e4 <xTaskGenericCreate+0xe4>
      dc:	69bb      	ldr	r3, [r7, #24]
      de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      e0:	4b1d      	ldr	r3, [pc, #116]	; (158 <xTaskGenericCreate+0x158>)
      e2:	601a      	str	r2, [r3, #0]
      e4:	69bb      	ldr	r3, [r7, #24]
      e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      e8:	4613      	mov	r3, r2
      ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
      ee:	189b      	adds	r3, r3, r2
      f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
      f4:	461a      	mov	r2, r3
      f6:	4b19      	ldr	r3, [pc, #100]	; (15c <xTaskGenericCreate+0x15c>)
      f8:	18d2      	adds	r2, r2, r3
      fa:	69bb      	ldr	r3, [r7, #24]
      fc:	f103 0304 	add.w	r3, r3, #4
     100:	4610      	mov	r0, r2
     102:	4619      	mov	r1, r3
     104:	f7ff fffe 	bl	0 <vListInsertEnd>
			104: R_ARM_THM_CALL	vListInsertEnd

			xReturn = pdPASS;
     108:	f04f 0301 	mov.w	r3, #1
     10c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     10e:	f7ff fffe 	bl	0 <vPortExitCritical>
			10e: R_ARM_THM_CALL	vPortExitCritical
     112:	e002      	b.n	11a <xTaskGenericCreate+0x11a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     114:	f04f 33ff 	mov.w	r3, #4294967295
     118:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
     11a:	69fb      	ldr	r3, [r7, #28]
     11c:	2b01      	cmp	r3, #1
     11e:	d10b      	bne.n	138 <xTaskGenericCreate+0x138>
	{
		if( xSchedulerRunning != pdFALSE )
     120:	4b0a      	ldr	r3, [pc, #40]	; (14c <xTaskGenericCreate+0x14c>)
     122:	681b      	ldr	r3, [r3, #0]
     124:	2b00      	cmp	r3, #0
     126:	d007      	beq.n	138 <xTaskGenericCreate+0x138>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     128:	4b07      	ldr	r3, [pc, #28]	; (148 <xTaskGenericCreate+0x148>)
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     130:	429a      	cmp	r2, r3
     132:	d201      	bcs.n	138 <xTaskGenericCreate+0x138>
			{
				portYIELD_WITHIN_API();
     134:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			134: R_ARM_THM_CALL	vPortYieldFromISR
			}
		}
	}

	return xReturn;
     138:	69fb      	ldr	r3, [r7, #28]
}
     13a:	4618      	mov	r0, r3
     13c:	f107 0720 	add.w	r7, r7, #32
     140:	46bd      	mov	sp, r7
     142:	bd80      	pop	{r7, pc}
     144:	000000ec 	.word	0x000000ec
			144: R_ARM_ABS32	.bss
     148:	00000000 	.word	0x00000000
			148: R_ARM_ABS32	pxCurrentTCB
     14c:	000000fc 	.word	0x000000fc
			14c: R_ARM_ABS32	.bss
     150:	000000f4 	.word	0x000000f4
			150: R_ARM_ABS32	.bss
     154:	00000110 	.word	0x00000110
			154: R_ARM_ABS32	.bss
     158:	000000f8 	.word	0x000000f8
			158: R_ARM_ABS32	.bss
     15c:	00000004 	.word	0x00000004
			15c: R_ARM_ABS32	.bss

00000160 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     168:	f7ff fffe 	bl	0 <vPortEnterCritical>
			168: R_ARM_THM_CALL	vPortEnterCritical
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
     16c:	4b20      	ldr	r3, [pc, #128]	; (1f0 <vTaskDelete+0x90>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	429a      	cmp	r2, r3
     174:	d102      	bne.n	17c <vTaskDelete+0x1c>
			{
				pxTaskToDelete = NULL;
     176:	f04f 0300 	mov.w	r3, #0
     17a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	2b00      	cmp	r3, #0
     180:	d102      	bne.n	188 <vTaskDelete+0x28>
     182:	4b1b      	ldr	r3, [pc, #108]	; (1f0 <vTaskDelete+0x90>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	e000      	b.n	18a <vTaskDelete+0x2a>
     188:	687b      	ldr	r3, [r7, #4]
     18a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
     18c:	68fb      	ldr	r3, [r7, #12]
     18e:	f103 0304 	add.w	r3, r3, #4
     192:	4618      	mov	r0, r3
     194:	f7ff fffe 	bl	0 <vListRemove>
			194: R_ARM_THM_CALL	vListRemove

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     19c:	2b00      	cmp	r3, #0
     19e:	d005      	beq.n	1ac <vTaskDelete+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
     1a0:	68fb      	ldr	r3, [r7, #12]
     1a2:	f103 0318 	add.w	r3, r3, #24
     1a6:	4618      	mov	r0, r3
     1a8:	f7ff fffe 	bl	0 <vListRemove>
			1a8: R_ARM_THM_CALL	vListRemove
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
     1ac:	68fb      	ldr	r3, [r7, #12]
     1ae:	f103 0304 	add.w	r3, r3, #4
     1b2:	4810      	ldr	r0, [pc, #64]	; (1f4 <vTaskDelete+0x94>)
     1b4:	4619      	mov	r1, r3
     1b6:	f7ff fffe 	bl	0 <vListInsertEnd>
			1b6: R_ARM_THM_CALL	vListInsertEnd

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
     1ba:	4b0f      	ldr	r3, [pc, #60]	; (1f8 <vTaskDelete+0x98>)
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	f103 0201 	add.w	r2, r3, #1
     1c2:	4b0d      	ldr	r3, [pc, #52]	; (1f8 <vTaskDelete+0x98>)
     1c4:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTCBNumber++;
     1c6:	4b0d      	ldr	r3, [pc, #52]	; (1fc <vTaskDelete+0x9c>)
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	f103 0201 	add.w	r2, r3, #1
     1ce:	4b0b      	ldr	r3, [pc, #44]	; (1fc <vTaskDelete+0x9c>)
     1d0:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
     1d2:	f7ff fffe 	bl	0 <vPortExitCritical>
			1d2: R_ARM_THM_CALL	vPortExitCritical

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
     1d6:	4b0a      	ldr	r3, [pc, #40]	; (200 <vTaskDelete+0xa0>)
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	2b00      	cmp	r3, #0
     1dc:	d004      	beq.n	1e8 <vTaskDelete+0x88>
		{
			if( ( void * ) pxTaskToDelete == NULL )
     1de:	687b      	ldr	r3, [r7, #4]
     1e0:	2b00      	cmp	r3, #0
     1e2:	d101      	bne.n	1e8 <vTaskDelete+0x88>
			{
				portYIELD_WITHIN_API();
     1e4:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			1e4: R_ARM_THM_CALL	vPortYieldFromISR
			}
		}
	}
     1e8:	f107 0710 	add.w	r7, r7, #16
     1ec:	46bd      	mov	sp, r7
     1ee:	bd80      	pop	{r7, pc}
     1f0:	00000000 	.word	0x00000000
			1f0: R_ARM_ABS32	pxCurrentTCB
     1f4:	000000c0 	.word	0x000000c0
			1f4: R_ARM_ABS32	.bss
     1f8:	000000d4 	.word	0x000000d4
			1f8: R_ARM_ABS32	.bss
     1fc:	00000110 	.word	0x00000110
			1fc: R_ARM_ABS32	.bss
     200:	000000fc 	.word	0x000000fc
			200: R_ARM_ABS32	.bss

00000204 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
     204:	b580      	push	{r7, lr}
     206:	b086      	sub	sp, #24
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
     20c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
     20e:	f04f 0300 	mov.w	r3, #0
     212:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
     214:	f7ff fffe 	bl	724 <vTaskSuspendAll>
			214: R_ARM_THM_CALL	vTaskSuspendAll
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681a      	ldr	r2, [r3, #0]
     21c:	683b      	ldr	r3, [r7, #0]
     21e:	18d3      	adds	r3, r2, r3
     220:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
     222:	687b      	ldr	r3, [r7, #4]
     224:	681a      	ldr	r2, [r3, #0]
     226:	4b1d      	ldr	r3, [pc, #116]	; (29c <vTaskDelayUntil+0x98>)
     228:	681b      	ldr	r3, [r3, #0]
     22a:	429a      	cmp	r2, r3
     22c:	d90d      	bls.n	24a <vTaskDelayUntil+0x46>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
     22e:	687b      	ldr	r3, [r7, #4]
     230:	681a      	ldr	r2, [r3, #0]
     232:	693b      	ldr	r3, [r7, #16]
     234:	429a      	cmp	r2, r3
     236:	d915      	bls.n	264 <vTaskDelayUntil+0x60>
     238:	4b18      	ldr	r3, [pc, #96]	; (29c <vTaskDelayUntil+0x98>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	693a      	ldr	r2, [r7, #16]
     23e:	429a      	cmp	r2, r3
     240:	d910      	bls.n	264 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
     242:	f04f 0301 	mov.w	r3, #1
     246:	617b      	str	r3, [r7, #20]
     248:	e00c      	b.n	264 <vTaskDelayUntil+0x60>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	681a      	ldr	r2, [r3, #0]
     24e:	693b      	ldr	r3, [r7, #16]
     250:	429a      	cmp	r2, r3
     252:	d804      	bhi.n	25e <vTaskDelayUntil+0x5a>
     254:	4b11      	ldr	r3, [pc, #68]	; (29c <vTaskDelayUntil+0x98>)
     256:	681b      	ldr	r3, [r3, #0]
     258:	693a      	ldr	r2, [r7, #16]
     25a:	429a      	cmp	r2, r3
     25c:	d902      	bls.n	264 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
     25e:	f04f 0301 	mov.w	r3, #1
     262:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
     264:	687b      	ldr	r3, [r7, #4]
     266:	693a      	ldr	r2, [r7, #16]
     268:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
     26a:	697b      	ldr	r3, [r7, #20]
     26c:	2b00      	cmp	r3, #0
     26e:	d009      	beq.n	284 <vTaskDelayUntil+0x80>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     270:	4b0b      	ldr	r3, [pc, #44]	; (2a0 <vTaskDelayUntil+0x9c>)
     272:	681b      	ldr	r3, [r3, #0]
     274:	f103 0304 	add.w	r3, r3, #4
     278:	4618      	mov	r0, r3
     27a:	f7ff fffe 	bl	0 <vListRemove>
			27a: R_ARM_THM_CALL	vListRemove
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     27e:	6938      	ldr	r0, [r7, #16]
     280:	f000 fdd0 	bl	e24 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
     284:	f7ff fffe 	bl	740 <xTaskResumeAll>
			284: R_ARM_THM_CALL	xTaskResumeAll
     288:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     28a:	68fb      	ldr	r3, [r7, #12]
     28c:	2b00      	cmp	r3, #0
     28e:	d101      	bne.n	294 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
     290:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			290: R_ARM_THM_CALL	vPortYieldFromISR
		}
	}
     294:	f107 0718 	add.w	r7, r7, #24
     298:	46bd      	mov	sp, r7
     29a:	bd80      	pop	{r7, pc}
     29c:	000000f0 	.word	0x000000f0
			29c: R_ARM_ABS32	.bss
     2a0:	00000000 	.word	0x00000000
			2a0: R_ARM_ABS32	pxCurrentTCB

000002a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     2ac:	f04f 0300 	mov.w	r3, #0
     2b0:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d013      	beq.n	2e0 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
     2b8:	f7ff fffe 	bl	724 <vTaskSuspendAll>
			2b8: R_ARM_THM_CALL	vTaskSuspendAll
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <vTaskDelay+0x50>)
     2be:	681a      	ldr	r2, [r3, #0]
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	18d3      	adds	r3, r2, r3
     2c4:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <vTaskDelay+0x54>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f103 0304 	add.w	r3, r3, #4
     2ce:	4618      	mov	r0, r3
     2d0:	f7ff fffe 	bl	0 <vListRemove>
			2d0: R_ARM_THM_CALL	vListRemove
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     2d4:	68b8      	ldr	r0, [r7, #8]
     2d6:	f000 fda5 	bl	e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     2da:	f7ff fffe 	bl	740 <xTaskResumeAll>
			2da: R_ARM_THM_CALL	xTaskResumeAll
     2de:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     2e0:	68fb      	ldr	r3, [r7, #12]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d101      	bne.n	2ea <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
     2e6:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			2e6: R_ARM_THM_CALL	vPortYieldFromISR
		}
	}
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bd80      	pop	{r7, pc}
     2f2:	bf00      	nop
     2f4:	000000f0 	.word	0x000000f0
			2f4: R_ARM_ABS32	.bss
     2f8:	00000000 	.word	0x00000000
			2f8: R_ARM_ABS32	pxCurrentTCB

000002fc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
     304:	f7ff fffe 	bl	0 <vPortEnterCritical>
			304: R_ARM_THM_CALL	vPortEnterCritical
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2b00      	cmp	r3, #0
     30c:	d102      	bne.n	314 <uxTaskPriorityGet+0x18>
     30e:	4b08      	ldr	r3, [pc, #32]	; (330 <uxTaskPriorityGet+0x34>)
     310:	681b      	ldr	r3, [r3, #0]
     312:	e000      	b.n	316 <uxTaskPriorityGet+0x1a>
     314:	687b      	ldr	r3, [r7, #4]
     316:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
     318:	68fb      	ldr	r3, [r7, #12]
     31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     31c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
     31e:	f7ff fffe 	bl	0 <vPortExitCritical>
			31e: R_ARM_THM_CALL	vPortExitCritical

		return uxReturn;
     322:	68bb      	ldr	r3, [r7, #8]
	}
     324:	4618      	mov	r0, r3
     326:	f107 0710 	add.w	r7, r7, #16
     32a:	46bd      	mov	sp, r7
     32c:	bd80      	pop	{r7, pc}
     32e:	bf00      	nop
     330:	00000000 	.word	0x00000000
			330: R_ARM_ABS32	pxCurrentTCB

00000334 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
     334:	b580      	push	{r7, lr}
     336:	b086      	sub	sp, #24
     338:	af00      	add	r7, sp, #0
     33a:	6078      	str	r0, [r7, #4]
     33c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
     33e:	f04f 0300 	mov.w	r3, #0
     342:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
     344:	683b      	ldr	r3, [r7, #0]
     346:	2b05      	cmp	r3, #5
     348:	d902      	bls.n	350 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
     34a:	f04f 0305 	mov.w	r3, #5
     34e:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
     350:	f7ff fffe 	bl	0 <vPortEnterCritical>
			350: R_ARM_THM_CALL	vPortEnterCritical
		{
			if( pxTask == pxCurrentTCB )
     354:	4b39      	ldr	r3, [pc, #228]	; (43c <vTaskPrioritySet+0x108>)
     356:	681b      	ldr	r3, [r3, #0]
     358:	687a      	ldr	r2, [r7, #4]
     35a:	429a      	cmp	r2, r3
     35c:	d102      	bne.n	364 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
     35e:	f04f 0300 	mov.w	r3, #0
     362:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
     364:	687b      	ldr	r3, [r7, #4]
     366:	2b00      	cmp	r3, #0
     368:	d102      	bne.n	370 <vTaskPrioritySet+0x3c>
     36a:	4b34      	ldr	r3, [pc, #208]	; (43c <vTaskPrioritySet+0x108>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	e000      	b.n	372 <vTaskPrioritySet+0x3e>
     370:	687b      	ldr	r3, [r7, #4]
     372:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
     374:	693b      	ldr	r3, [r7, #16]
     376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     378:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
     37a:	68fa      	ldr	r2, [r7, #12]
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	429a      	cmp	r2, r3
     380:	d056      	beq.n	430 <vTaskPrioritySet+0xfc>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
     382:	683a      	ldr	r2, [r7, #0]
     384:	68fb      	ldr	r3, [r7, #12]
     386:	429a      	cmp	r2, r3
     388:	d906      	bls.n	398 <vTaskPrioritySet+0x64>
				{
					if( pxTask != NULL )
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	2b00      	cmp	r3, #0
     38e:	d009      	beq.n	3a4 <vTaskPrioritySet+0x70>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
     390:	f04f 0301 	mov.w	r3, #1
     394:	617b      	str	r3, [r7, #20]
     396:	e005      	b.n	3a4 <vTaskPrioritySet+0x70>
					}
				}
				else if( pxTask == NULL )
     398:	687b      	ldr	r3, [r7, #4]
     39a:	2b00      	cmp	r3, #0
     39c:	d102      	bne.n	3a4 <vTaskPrioritySet+0x70>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
     39e:	f04f 0301 	mov.w	r3, #1
     3a2:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
     3a4:	693b      	ldr	r3, [r7, #16]
     3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     3a8:	693b      	ldr	r3, [r7, #16]
     3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     3ac:	429a      	cmp	r2, r3
     3ae:	d102      	bne.n	3b6 <vTaskPrioritySet+0x82>
					{
						pxTCB->uxPriority = uxNewPriority;
     3b0:	693b      	ldr	r3, [r7, #16]
     3b2:	683a      	ldr	r2, [r7, #0]
     3b4:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
     3b6:	693b      	ldr	r3, [r7, #16]
     3b8:	683a      	ldr	r2, [r7, #0]
     3ba:	641a      	str	r2, [r3, #64]	; 0x40
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
     3bc:	683b      	ldr	r3, [r7, #0]
     3be:	f1c3 0206 	rsb	r2, r3, #6
     3c2:	693b      	ldr	r3, [r7, #16]
     3c4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
     3c6:	693b      	ldr	r3, [r7, #16]
     3c8:	6959      	ldr	r1, [r3, #20]
     3ca:	68fa      	ldr	r2, [r7, #12]
     3cc:	4613      	mov	r3, r2
     3ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
     3d2:	189b      	adds	r3, r3, r2
     3d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     3d8:	461a      	mov	r2, r3
     3da:	4b19      	ldr	r3, [pc, #100]	; (440 <vTaskPrioritySet+0x10c>)
     3dc:	18d3      	adds	r3, r2, r3
     3de:	4299      	cmp	r1, r3
     3e0:	d121      	bne.n	426 <vTaskPrioritySet+0xf2>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
     3e2:	693b      	ldr	r3, [r7, #16]
     3e4:	f103 0304 	add.w	r3, r3, #4
     3e8:	4618      	mov	r0, r3
     3ea:	f7ff fffe 	bl	0 <vListRemove>
			3ea: R_ARM_THM_CALL	vListRemove
					prvAddTaskToReadyQueue( pxTCB );
     3ee:	693b      	ldr	r3, [r7, #16]
     3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     3f2:	4b14      	ldr	r3, [pc, #80]	; (444 <vTaskPrioritySet+0x110>)
     3f4:	681b      	ldr	r3, [r3, #0]
     3f6:	429a      	cmp	r2, r3
     3f8:	d903      	bls.n	402 <vTaskPrioritySet+0xce>
     3fa:	693b      	ldr	r3, [r7, #16]
     3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     3fe:	4b11      	ldr	r3, [pc, #68]	; (444 <vTaskPrioritySet+0x110>)
     400:	601a      	str	r2, [r3, #0]
     402:	693b      	ldr	r3, [r7, #16]
     404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     406:	4613      	mov	r3, r2
     408:	ea4f 0383 	mov.w	r3, r3, lsl #2
     40c:	189b      	adds	r3, r3, r2
     40e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     412:	461a      	mov	r2, r3
     414:	4b0a      	ldr	r3, [pc, #40]	; (440 <vTaskPrioritySet+0x10c>)
     416:	18d2      	adds	r2, r2, r3
     418:	693b      	ldr	r3, [r7, #16]
     41a:	f103 0304 	add.w	r3, r3, #4
     41e:	4610      	mov	r0, r2
     420:	4619      	mov	r1, r3
     422:	f7ff fffe 	bl	0 <vListInsertEnd>
			422: R_ARM_THM_CALL	vListInsertEnd
				}

				if( xYieldRequired == pdTRUE )
     426:	697b      	ldr	r3, [r7, #20]
     428:	2b01      	cmp	r3, #1
     42a:	d101      	bne.n	430 <vTaskPrioritySet+0xfc>
				{
					portYIELD_WITHIN_API();
     42c:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			42c: R_ARM_THM_CALL	vPortYieldFromISR
				}
			}
		}
		taskEXIT_CRITICAL();
     430:	f7ff fffe 	bl	0 <vPortExitCritical>
			430: R_ARM_THM_CALL	vPortExitCritical
	}
     434:	f107 0718 	add.w	r7, r7, #24
     438:	46bd      	mov	sp, r7
     43a:	bd80      	pop	{r7, pc}
     43c:	00000000 	.word	0x00000000
			43c: R_ARM_ABS32	pxCurrentTCB
     440:	00000004 	.word	0x00000004
			440: R_ARM_ABS32	.bss
     444:	000000f8 	.word	0x000000f8
			444: R_ARM_ABS32	.bss

00000448 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
     448:	b580      	push	{r7, lr}
     44a:	b084      	sub	sp, #16
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
     450:	f7ff fffe 	bl	0 <vPortEnterCritical>
			450: R_ARM_THM_CALL	vPortEnterCritical
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
     454:	4b21      	ldr	r3, [pc, #132]	; (4dc <vTaskSuspend+0x94>)
     456:	681b      	ldr	r3, [r3, #0]
     458:	687a      	ldr	r2, [r7, #4]
     45a:	429a      	cmp	r2, r3
     45c:	d102      	bne.n	464 <vTaskSuspend+0x1c>
			{
				pxTaskToSuspend = NULL;
     45e:	f04f 0300 	mov.w	r3, #0
     462:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d102      	bne.n	470 <vTaskSuspend+0x28>
     46a:	4b1c      	ldr	r3, [pc, #112]	; (4dc <vTaskSuspend+0x94>)
     46c:	681b      	ldr	r3, [r3, #0]
     46e:	e000      	b.n	472 <vTaskSuspend+0x2a>
     470:	687b      	ldr	r3, [r7, #4]
     472:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
     474:	68fb      	ldr	r3, [r7, #12]
     476:	f103 0304 	add.w	r3, r3, #4
     47a:	4618      	mov	r0, r3
     47c:	f7ff fffe 	bl	0 <vListRemove>
			47c: R_ARM_THM_CALL	vListRemove

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
     480:	68fb      	ldr	r3, [r7, #12]
     482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     484:	2b00      	cmp	r3, #0
     486:	d005      	beq.n	494 <vTaskSuspend+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
     488:	68fb      	ldr	r3, [r7, #12]
     48a:	f103 0318 	add.w	r3, r3, #24
     48e:	4618      	mov	r0, r3
     490:	f7ff fffe 	bl	0 <vListRemove>
			490: R_ARM_THM_CALL	vListRemove
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
     494:	68fb      	ldr	r3, [r7, #12]
     496:	f103 0304 	add.w	r3, r3, #4
     49a:	4811      	ldr	r0, [pc, #68]	; (4e0 <vTaskSuspend+0x98>)
     49c:	4619      	mov	r1, r3
     49e:	f7ff fffe 	bl	0 <vListInsertEnd>
			49e: R_ARM_THM_CALL	vListInsertEnd
		}
		taskEXIT_CRITICAL();
     4a2:	f7ff fffe 	bl	0 <vPortExitCritical>
			4a2: R_ARM_THM_CALL	vPortExitCritical

		if( ( void * ) pxTaskToSuspend == NULL )
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	2b00      	cmp	r3, #0
     4aa:	d113      	bne.n	4d4 <vTaskSuspend+0x8c>
		{
			if( xSchedulerRunning != pdFALSE )
     4ac:	4b0d      	ldr	r3, [pc, #52]	; (4e4 <vTaskSuspend+0x9c>)
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d002      	beq.n	4ba <vTaskSuspend+0x72>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
     4b4:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			4b4: R_ARM_THM_CALL	vPortYieldFromISR
     4b8:	e00c      	b.n	4d4 <vTaskSuspend+0x8c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
     4ba:	4b09      	ldr	r3, [pc, #36]	; (4e0 <vTaskSuspend+0x98>)
     4bc:	681a      	ldr	r2, [r3, #0]
     4be:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <vTaskSuspend+0xa0>)
     4c0:	681b      	ldr	r3, [r3, #0]
     4c2:	429a      	cmp	r2, r3
     4c4:	d104      	bne.n	4d0 <vTaskSuspend+0x88>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
     4c6:	4b05      	ldr	r3, [pc, #20]	; (4dc <vTaskSuspend+0x94>)
     4c8:	f04f 0200 	mov.w	r2, #0
     4cc:	601a      	str	r2, [r3, #0]
     4ce:	e001      	b.n	4d4 <vTaskSuspend+0x8c>
				}
				else
				{
					vTaskSwitchContext();
     4d0:	f7ff fffe 	bl	9fc <vTaskSwitchContext>
			4d0: R_ARM_THM_CALL	vTaskSwitchContext
				}
			}
		}
	}
     4d4:	f107 0710 	add.w	r7, r7, #16
     4d8:	46bd      	mov	sp, r7
     4da:	bd80      	pop	{r7, pc}
     4dc:	00000000 	.word	0x00000000
			4dc: R_ARM_ABS32	pxCurrentTCB
     4e0:	000000d8 	.word	0x000000d8
			4e0: R_ARM_ABS32	.bss
     4e4:	000000fc 	.word	0x000000fc
			4e4: R_ARM_ABS32	.bss
     4e8:	000000ec 	.word	0x000000ec
			4e8: R_ARM_ABS32	.bss

000004ec <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
     4ec:	b480      	push	{r7}
     4ee:	b085      	sub	sp, #20
     4f0:	af00      	add	r7, sp, #0
     4f2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
     4f4:	f04f 0300 	mov.w	r3, #0
     4f8:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
     4fe:	68bb      	ldr	r3, [r7, #8]
     500:	695a      	ldr	r2, [r3, #20]
     502:	4b0b      	ldr	r3, [pc, #44]	; (530 <xTaskIsTaskSuspended+0x44>)
     504:	429a      	cmp	r2, r3
     506:	d10b      	bne.n	520 <xTaskIsTaskSuspended+0x34>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
     508:	68bb      	ldr	r3, [r7, #8]
     50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     50c:	4b09      	ldr	r3, [pc, #36]	; (534 <xTaskIsTaskSuspended+0x48>)
     50e:	429a      	cmp	r2, r3
     510:	d006      	beq.n	520 <xTaskIsTaskSuspended+0x34>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
     512:	68bb      	ldr	r3, [r7, #8]
     514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     516:	2b00      	cmp	r3, #0
     518:	d102      	bne.n	520 <xTaskIsTaskSuspended+0x34>
				{
					xReturn = pdTRUE;
     51a:	f04f 0301 	mov.w	r3, #1
     51e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
     520:	68fb      	ldr	r3, [r7, #12]
	}
     522:	4618      	mov	r0, r3
     524:	f107 0714 	add.w	r7, r7, #20
     528:	46bd      	mov	sp, r7
     52a:	bc80      	pop	{r7}
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	000000d8 	.word	0x000000d8
			530: R_ARM_ABS32	.bss
     534:	000000ac 	.word	0x000000ac
			534: R_ARM_ABS32	.bss

00000538 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
     538:	b580      	push	{r7, lr}
     53a:	b084      	sub	sp, #16
     53c:	af00      	add	r7, sp, #0
     53e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
     540:	687b      	ldr	r3, [r7, #4]
     542:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
     544:	68fb      	ldr	r3, [r7, #12]
     546:	2b00      	cmp	r3, #0
     548:	d039      	beq.n	5be <vTaskResume+0x86>
     54a:	4b1f      	ldr	r3, [pc, #124]	; (5c8 <vTaskResume+0x90>)
     54c:	681b      	ldr	r3, [r3, #0]
     54e:	68fa      	ldr	r2, [r7, #12]
     550:	429a      	cmp	r2, r3
     552:	d034      	beq.n	5be <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
     554:	f7ff fffe 	bl	0 <vPortEnterCritical>
			554: R_ARM_THM_CALL	vPortEnterCritical
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     558:	68f8      	ldr	r0, [r7, #12]
     55a:	f7ff fffe 	bl	4ec <xTaskIsTaskSuspended>
			55a: R_ARM_THM_CALL	xTaskIsTaskSuspended
     55e:	4603      	mov	r3, r0
     560:	2b01      	cmp	r3, #1
     562:	d12a      	bne.n	5ba <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
     564:	68fb      	ldr	r3, [r7, #12]
     566:	f103 0304 	add.w	r3, r3, #4
     56a:	4618      	mov	r0, r3
     56c:	f7ff fffe 	bl	0 <vListRemove>
			56c: R_ARM_THM_CALL	vListRemove
					prvAddTaskToReadyQueue( pxTCB );
     570:	68fb      	ldr	r3, [r7, #12]
     572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     574:	4b15      	ldr	r3, [pc, #84]	; (5cc <vTaskResume+0x94>)
     576:	681b      	ldr	r3, [r3, #0]
     578:	429a      	cmp	r2, r3
     57a:	d903      	bls.n	584 <vTaskResume+0x4c>
     57c:	68fb      	ldr	r3, [r7, #12]
     57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     580:	4b12      	ldr	r3, [pc, #72]	; (5cc <vTaskResume+0x94>)
     582:	601a      	str	r2, [r3, #0]
     584:	68fb      	ldr	r3, [r7, #12]
     586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     588:	4613      	mov	r3, r2
     58a:	ea4f 0383 	mov.w	r3, r3, lsl #2
     58e:	189b      	adds	r3, r3, r2
     590:	ea4f 0383 	mov.w	r3, r3, lsl #2
     594:	461a      	mov	r2, r3
     596:	4b0e      	ldr	r3, [pc, #56]	; (5d0 <vTaskResume+0x98>)
     598:	18d2      	adds	r2, r2, r3
     59a:	68fb      	ldr	r3, [r7, #12]
     59c:	f103 0304 	add.w	r3, r3, #4
     5a0:	4610      	mov	r0, r2
     5a2:	4619      	mov	r1, r3
     5a4:	f7ff fffe 	bl	0 <vListInsertEnd>
			5a4: R_ARM_THM_CALL	vListInsertEnd

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <vTaskResume+0x90>)
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     5b2:	429a      	cmp	r2, r3
     5b4:	d301      	bcc.n	5ba <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
     5b6:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			5b6: R_ARM_THM_CALL	vPortYieldFromISR
					}
				}
			}
			taskEXIT_CRITICAL();
     5ba:	f7ff fffe 	bl	0 <vPortExitCritical>
			5ba: R_ARM_THM_CALL	vPortExitCritical
		}
	}
     5be:	f107 0710 	add.w	r7, r7, #16
     5c2:	46bd      	mov	sp, r7
     5c4:	bd80      	pop	{r7, pc}
     5c6:	bf00      	nop
     5c8:	00000000 	.word	0x00000000
			5c8: R_ARM_ABS32	pxCurrentTCB
     5cc:	000000f8 	.word	0x000000f8
			5cc: R_ARM_ABS32	.bss
     5d0:	00000004 	.word	0x00000004
			5d0: R_ARM_ABS32	.bss

000005d4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
     5d4:	b580      	push	{r7, lr}
     5d6:	b086      	sub	sp, #24
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
     5dc:	f04f 0300 	mov.w	r3, #0
     5e0:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     5e6:	f04f 0300 	mov.w	r3, #0
     5ea:	60fb      	str	r3, [r7, #12]
     5ec:	f04f 0040 	mov.w	r0, #64	; 0x40
     5f0:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
     5f4:	6938      	ldr	r0, [r7, #16]
     5f6:	f7ff fffe 	bl	4ec <xTaskIsTaskSuspended>
			5f6: R_ARM_THM_CALL	xTaskIsTaskSuspended
     5fa:	4603      	mov	r3, r0
     5fc:	2b01      	cmp	r3, #1
     5fe:	d137      	bne.n	670 <xTaskResumeFromISR+0x9c>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     600:	4b20      	ldr	r3, [pc, #128]	; (684 <xTaskResumeFromISR+0xb0>)
     602:	681b      	ldr	r3, [r3, #0]
     604:	2b00      	cmp	r3, #0
     606:	d12c      	bne.n	662 <xTaskResumeFromISR+0x8e>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
     608:	693b      	ldr	r3, [r7, #16]
     60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     60c:	4b1e      	ldr	r3, [pc, #120]	; (688 <xTaskResumeFromISR+0xb4>)
     60e:	681b      	ldr	r3, [r3, #0]
     610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     612:	429a      	cmp	r2, r3
     614:	bf34      	ite	cc
     616:	2300      	movcc	r3, #0
     618:	2301      	movcs	r3, #1
     61a:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
     61c:	693b      	ldr	r3, [r7, #16]
     61e:	f103 0304 	add.w	r3, r3, #4
     622:	4618      	mov	r0, r3
     624:	f7ff fffe 	bl	0 <vListRemove>
			624: R_ARM_THM_CALL	vListRemove
					prvAddTaskToReadyQueue( pxTCB );
     628:	693b      	ldr	r3, [r7, #16]
     62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     62c:	4b17      	ldr	r3, [pc, #92]	; (68c <xTaskResumeFromISR+0xb8>)
     62e:	681b      	ldr	r3, [r3, #0]
     630:	429a      	cmp	r2, r3
     632:	d903      	bls.n	63c <xTaskResumeFromISR+0x68>
     634:	693b      	ldr	r3, [r7, #16]
     636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     638:	4b14      	ldr	r3, [pc, #80]	; (68c <xTaskResumeFromISR+0xb8>)
     63a:	601a      	str	r2, [r3, #0]
     63c:	693b      	ldr	r3, [r7, #16]
     63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     640:	4613      	mov	r3, r2
     642:	ea4f 0383 	mov.w	r3, r3, lsl #2
     646:	189b      	adds	r3, r3, r2
     648:	ea4f 0383 	mov.w	r3, r3, lsl #2
     64c:	461a      	mov	r2, r3
     64e:	4b10      	ldr	r3, [pc, #64]	; (690 <xTaskResumeFromISR+0xbc>)
     650:	18d2      	adds	r2, r2, r3
     652:	693b      	ldr	r3, [r7, #16]
     654:	f103 0304 	add.w	r3, r3, #4
     658:	4610      	mov	r0, r2
     65a:	4619      	mov	r1, r3
     65c:	f7ff fffe 	bl	0 <vListInsertEnd>
			65c: R_ARM_THM_CALL	vListInsertEnd
     660:	e006      	b.n	670 <xTaskResumeFromISR+0x9c>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     662:	693b      	ldr	r3, [r7, #16]
     664:	f103 0318 	add.w	r3, r3, #24
     668:	480a      	ldr	r0, [pc, #40]	; (694 <xTaskResumeFromISR+0xc0>)
     66a:	4619      	mov	r1, r3
     66c:	f7ff fffe 	bl	0 <vListInsertEnd>
			66c: R_ARM_THM_CALL	vListInsertEnd
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     670:	f04f 0000 	mov.w	r0, #0
     674:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
     678:	697b      	ldr	r3, [r7, #20]
	}
     67a:	4618      	mov	r0, r3
     67c:	f107 0718 	add.w	r7, r7, #24
     680:	46bd      	mov	sp, r7
     682:	bd80      	pop	{r7, pc}
     684:	00000100 	.word	0x00000100
			684: R_ARM_ABS32	.bss
     688:	00000000 	.word	0x00000000
			688: R_ARM_ABS32	pxCurrentTCB
     68c:	000000f8 	.word	0x000000f8
			68c: R_ARM_ABS32	.bss
     690:	00000004 	.word	0x00000004
			690: R_ARM_ABS32	.bss
     694:	000000ac 	.word	0x000000ac
			694: R_ARM_ABS32	.bss

00000698 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
     698:	b580      	push	{r7, lr}
     69a:	b086      	sub	sp, #24
     69c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     69e:	4b15      	ldr	r3, [pc, #84]	; (6f4 <vTaskStartScheduler+0x5c>)
     6a0:	f04f 0200 	mov.w	r2, #0
     6a4:	9200      	str	r2, [sp, #0]
     6a6:	f04f 0200 	mov.w	r2, #0
     6aa:	9201      	str	r2, [sp, #4]
     6ac:	f04f 0200 	mov.w	r2, #0
     6b0:	9202      	str	r2, [sp, #8]
     6b2:	f04f 0200 	mov.w	r2, #0
     6b6:	9203      	str	r2, [sp, #12]
     6b8:	480f      	ldr	r0, [pc, #60]	; (6f8 <vTaskStartScheduler+0x60>)
     6ba:	4619      	mov	r1, r3
     6bc:	f44f 7280 	mov.w	r2, #256	; 0x100
     6c0:	f04f 0300 	mov.w	r3, #0
     6c4:	f7ff fffe 	bl	0 <xTaskGenericCreate>
			6c4: R_ARM_THM_CALL	xTaskGenericCreate
     6c8:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	2b01      	cmp	r3, #1
     6ce:	d10d      	bne.n	6ec <vTaskStartScheduler+0x54>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     6d0:	f04f 0040 	mov.w	r0, #64	; 0x40
     6d4:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
     6d8:	4b08      	ldr	r3, [pc, #32]	; (6fc <vTaskStartScheduler+0x64>)
     6da:	f04f 0201 	mov.w	r2, #1
     6de:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
     6e0:	4b07      	ldr	r3, [pc, #28]	; (700 <vTaskStartScheduler+0x68>)
     6e2:	f04f 0200 	mov.w	r2, #0
     6e6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     6e8:	f7ff fffe 	bl	0 <xPortStartScheduler>
			6e8: R_ARM_THM_CALL	xPortStartScheduler
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
     6ec:	f107 0708 	add.w	r7, r7, #8
     6f0:	46bd      	mov	sp, r7
     6f2:	bd80      	pop	{r7, pc}
	...
			6f4: R_ARM_ABS32	.rodata
			6f8: R_ARM_ABS32	prvIdleTask
     6fc:	000000fc 	.word	0x000000fc
			6fc: R_ARM_ABS32	.bss
     700:	000000f0 	.word	0x000000f0
			700: R_ARM_ABS32	.bss

00000704 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
     704:	b580      	push	{r7, lr}
     706:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
     708:	f04f 0040 	mov.w	r0, #64	; 0x40
     70c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
     710:	4b03      	ldr	r3, [pc, #12]	; (720 <vTaskEndScheduler+0x1c>)
     712:	f04f 0200 	mov.w	r2, #0
     716:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
     718:	f7ff fffe 	bl	0 <vPortEndScheduler>
			718: R_ARM_THM_CALL	vPortEndScheduler
}
     71c:	bd80      	pop	{r7, pc}
     71e:	bf00      	nop
     720:	000000fc 	.word	0x000000fc
			720: R_ARM_ABS32	.bss

00000724 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
     724:	b480      	push	{r7}
     726:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     728:	4b04      	ldr	r3, [pc, #16]	; (73c <vTaskSuspendAll+0x18>)
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	f103 0201 	add.w	r2, r3, #1
     730:	4b02      	ldr	r3, [pc, #8]	; (73c <vTaskSuspendAll+0x18>)
     732:	601a      	str	r2, [r3, #0]
}
     734:	46bd      	mov	sp, r7
     736:	bc80      	pop	{r7}
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	00000100 	.word	0x00000100
			73c: R_ARM_ABS32	.bss

00000740 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     740:	b590      	push	{r4, r7, lr}
     742:	b083      	sub	sp, #12
     744:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     746:	f04f 0300 	mov.w	r3, #0
     74a:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     74c:	f7ff fffe 	bl	0 <vPortEnterCritical>
			74c: R_ARM_THM_CALL	vPortEnterCritical
	{
		--uxSchedulerSuspended;
     750:	4b38      	ldr	r3, [pc, #224]	; (834 <xTaskResumeAll+0xf4>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	f103 32ff 	add.w	r2, r3, #4294967295
     758:	4b36      	ldr	r3, [pc, #216]	; (834 <xTaskResumeAll+0xf4>)
     75a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     75c:	4b35      	ldr	r3, [pc, #212]	; (834 <xTaskResumeAll+0xf4>)
     75e:	681b      	ldr	r3, [r3, #0]
     760:	2b00      	cmp	r3, #0
     762:	d15e      	bne.n	822 <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     764:	4b34      	ldr	r3, [pc, #208]	; (838 <xTaskResumeAll+0xf8>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	2b00      	cmp	r3, #0
     76a:	d05a      	beq.n	822 <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
     76c:	f04f 0300 	mov.w	r3, #0
     770:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     772:	e02e      	b.n	7d2 <xTaskResumeAll+0x92>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     774:	4b31      	ldr	r3, [pc, #196]	; (83c <xTaskResumeAll+0xfc>)
     776:	68db      	ldr	r3, [r3, #12]
     778:	68db      	ldr	r3, [r3, #12]
     77a:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
     77c:	f104 0318 	add.w	r3, r4, #24
     780:	4618      	mov	r0, r3
     782:	f7ff fffe 	bl	0 <vListRemove>
			782: R_ARM_THM_CALL	vListRemove
					vListRemove( &( pxTCB->xGenericListItem ) );
     786:	f104 0304 	add.w	r3, r4, #4
     78a:	4618      	mov	r0, r3
     78c:	f7ff fffe 	bl	0 <vListRemove>
			78c: R_ARM_THM_CALL	vListRemove
					prvAddTaskToReadyQueue( pxTCB );
     790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     792:	4b2b      	ldr	r3, [pc, #172]	; (840 <xTaskResumeAll+0x100>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	429a      	cmp	r2, r3
     798:	d902      	bls.n	7a0 <xTaskResumeAll+0x60>
     79a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     79c:	4b28      	ldr	r3, [pc, #160]	; (840 <xTaskResumeAll+0x100>)
     79e:	601a      	str	r2, [r3, #0]
     7a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     7a2:	4613      	mov	r3, r2
     7a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     7a8:	189b      	adds	r3, r3, r2
     7aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
     7ae:	461a      	mov	r2, r3
     7b0:	4b24      	ldr	r3, [pc, #144]	; (844 <xTaskResumeAll+0x104>)
     7b2:	18d2      	adds	r2, r2, r3
     7b4:	f104 0304 	add.w	r3, r4, #4
     7b8:	4610      	mov	r0, r2
     7ba:	4619      	mov	r1, r3
     7bc:	f7ff fffe 	bl	0 <vListInsertEnd>
			7bc: R_ARM_THM_CALL	vListInsertEnd

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     7c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     7c2:	4b21      	ldr	r3, [pc, #132]	; (848 <xTaskResumeAll+0x108>)
     7c4:	681b      	ldr	r3, [r3, #0]
     7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     7c8:	429a      	cmp	r2, r3
     7ca:	d302      	bcc.n	7d2 <xTaskResumeAll+0x92>
					{
						xYieldRequired = pdTRUE;
     7cc:	f04f 0301 	mov.w	r3, #1
     7d0:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     7d2:	4b1a      	ldr	r3, [pc, #104]	; (83c <xTaskResumeAll+0xfc>)
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d1cc      	bne.n	774 <xTaskResumeAll+0x34>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     7da:	4b1c      	ldr	r3, [pc, #112]	; (84c <xTaskResumeAll+0x10c>)
     7dc:	681b      	ldr	r3, [r3, #0]
     7de:	2b00      	cmp	r3, #0
     7e0:	d00f      	beq.n	802 <xTaskResumeAll+0xc2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     7e2:	e007      	b.n	7f4 <xTaskResumeAll+0xb4>
					{
						vTaskIncrementTick();
     7e4:	f7ff fffe 	bl	8c0 <vTaskIncrementTick>
			7e4: R_ARM_THM_CALL	vTaskIncrementTick
						--uxMissedTicks;
     7e8:	4b18      	ldr	r3, [pc, #96]	; (84c <xTaskResumeAll+0x10c>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	f103 32ff 	add.w	r2, r3, #4294967295
     7f0:	4b16      	ldr	r3, [pc, #88]	; (84c <xTaskResumeAll+0x10c>)
     7f2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     7f4:	4b15      	ldr	r3, [pc, #84]	; (84c <xTaskResumeAll+0x10c>)
     7f6:	681b      	ldr	r3, [r3, #0]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d1f3      	bne.n	7e4 <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
     7fc:	f04f 0301 	mov.w	r3, #1
     800:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     802:	683b      	ldr	r3, [r7, #0]
     804:	2b01      	cmp	r3, #1
     806:	d003      	beq.n	810 <xTaskResumeAll+0xd0>
     808:	4b11      	ldr	r3, [pc, #68]	; (850 <xTaskResumeAll+0x110>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	2b01      	cmp	r3, #1
     80e:	d108      	bne.n	822 <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
     810:	f04f 0301 	mov.w	r3, #1
     814:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
     816:	4b0e      	ldr	r3, [pc, #56]	; (850 <xTaskResumeAll+0x110>)
     818:	f04f 0200 	mov.w	r2, #0
     81c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
     81e:	f7ff fffe 	bl	0 <vPortYieldFromISR>
			81e: R_ARM_THM_CALL	vPortYieldFromISR
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     822:	f7ff fffe 	bl	0 <vPortExitCritical>
			822: R_ARM_THM_CALL	vPortExitCritical

	return xAlreadyYielded;
     826:	687b      	ldr	r3, [r7, #4]
}
     828:	4618      	mov	r0, r3
     82a:	f107 070c 	add.w	r7, r7, #12
     82e:	46bd      	mov	sp, r7
     830:	bd90      	pop	{r4, r7, pc}
     832:	bf00      	nop
     834:	00000100 	.word	0x00000100
			834: R_ARM_ABS32	.bss
     838:	000000ec 	.word	0x000000ec
			838: R_ARM_ABS32	.bss
     83c:	000000ac 	.word	0x000000ac
			83c: R_ARM_ABS32	.bss
     840:	000000f8 	.word	0x000000f8
			840: R_ARM_ABS32	.bss
     844:	00000004 	.word	0x00000004
			844: R_ARM_ABS32	.bss
     848:	00000000 	.word	0x00000000
			848: R_ARM_ABS32	pxCurrentTCB
     84c:	00000104 	.word	0x00000104
			84c: R_ARM_ABS32	.bss
     850:	00000108 	.word	0x00000108
			850: R_ARM_ABS32	.bss

00000854 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
     854:	b580      	push	{r7, lr}
     856:	b082      	sub	sp, #8
     858:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     85a:	f7ff fffe 	bl	0 <vPortEnterCritical>
			85a: R_ARM_THM_CALL	vPortEnterCritical
	{
		xTicks = xTickCount;
     85e:	4b05      	ldr	r3, [pc, #20]	; (874 <xTaskGetTickCount+0x20>)
     860:	681b      	ldr	r3, [r3, #0]
     862:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
     864:	f7ff fffe 	bl	0 <vPortExitCritical>
			864: R_ARM_THM_CALL	vPortExitCritical

	return xTicks;
     868:	687b      	ldr	r3, [r7, #4]
}
     86a:	4618      	mov	r0, r3
     86c:	f107 0708 	add.w	r7, r7, #8
     870:	46bd      	mov	sp, r7
     872:	bd80      	pop	{r7, pc}
     874:	000000f0 	.word	0x000000f0
			874: R_ARM_ABS32	.bss

00000878 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
     878:	b480      	push	{r7}
     87a:	b083      	sub	sp, #12
     87c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     87e:	f04f 0300 	mov.w	r3, #0
     882:	607b      	str	r3, [r7, #4]
     884:	f04f 0040 	mov.w	r0, #64	; 0x40
     888:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <xTaskGetTickCountFromISR+0x30>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     892:	f04f 0000 	mov.w	r0, #0
     896:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
     89a:	683b      	ldr	r3, [r7, #0]
}
     89c:	4618      	mov	r0, r3
     89e:	f107 070c 	add.w	r7, r7, #12
     8a2:	46bd      	mov	sp, r7
     8a4:	bc80      	pop	{r7}
     8a6:	4770      	bx	lr
     8a8:	000000f0 	.word	0x000000f0
			8a8: R_ARM_ABS32	.bss

000008ac <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
     8ac:	b480      	push	{r7}
     8ae:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
     8b0:	4b02      	ldr	r3, [pc, #8]	; (8bc <uxTaskGetNumberOfTasks+0x10>)
     8b2:	681b      	ldr	r3, [r3, #0]
}
     8b4:	4618      	mov	r0, r3
     8b6:	46bd      	mov	sp, r7
     8b8:	bc80      	pop	{r7}
     8ba:	4770      	bx	lr
     8bc:	000000ec 	.word	0x000000ec
			8bc: R_ARM_ABS32	.bss

000008c0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     8c6:	4b44      	ldr	r3, [pc, #272]	; (9d8 <vTaskIncrementTick+0x118>)
     8c8:	681b      	ldr	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d17a      	bne.n	9c4 <vTaskIncrementTick+0x104>
	{
		++xTickCount;
     8ce:	4b43      	ldr	r3, [pc, #268]	; (9dc <vTaskIncrementTick+0x11c>)
     8d0:	681b      	ldr	r3, [r3, #0]
     8d2:	f103 0201 	add.w	r2, r3, #1
     8d6:	4b41      	ldr	r3, [pc, #260]	; (9dc <vTaskIncrementTick+0x11c>)
     8d8:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     8da:	4b40      	ldr	r3, [pc, #256]	; (9dc <vTaskIncrementTick+0x11c>)
     8dc:	681b      	ldr	r3, [r3, #0]
     8de:	2b00      	cmp	r3, #0
     8e0:	d122      	bne.n	928 <vTaskIncrementTick+0x68>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
     8e2:	4b3f      	ldr	r3, [pc, #252]	; (9e0 <vTaskIncrementTick+0x120>)
     8e4:	681b      	ldr	r3, [r3, #0]
     8e6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     8e8:	4b3e      	ldr	r3, [pc, #248]	; (9e4 <vTaskIncrementTick+0x124>)
     8ea:	681a      	ldr	r2, [r3, #0]
     8ec:	4b3c      	ldr	r3, [pc, #240]	; (9e0 <vTaskIncrementTick+0x120>)
     8ee:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     8f0:	4b3c      	ldr	r3, [pc, #240]	; (9e4 <vTaskIncrementTick+0x124>)
     8f2:	68fa      	ldr	r2, [r7, #12]
     8f4:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
     8f6:	4b3c      	ldr	r3, [pc, #240]	; (9e8 <vTaskIncrementTick+0x128>)
     8f8:	681b      	ldr	r3, [r3, #0]
     8fa:	f103 0201 	add.w	r2, r3, #1
     8fe:	4b3a      	ldr	r3, [pc, #232]	; (9e8 <vTaskIncrementTick+0x128>)
     900:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     902:	4b37      	ldr	r3, [pc, #220]	; (9e0 <vTaskIncrementTick+0x120>)
     904:	681b      	ldr	r3, [r3, #0]
     906:	681b      	ldr	r3, [r3, #0]
     908:	2b00      	cmp	r3, #0
     90a:	d104      	bne.n	916 <vTaskIncrementTick+0x56>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     90c:	4b37      	ldr	r3, [pc, #220]	; (9ec <vTaskIncrementTick+0x12c>)
     90e:	f04f 32ff 	mov.w	r2, #4294967295
     912:	601a      	str	r2, [r3, #0]
     914:	e008      	b.n	928 <vTaskIncrementTick+0x68>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     916:	4b32      	ldr	r3, [pc, #200]	; (9e0 <vTaskIncrementTick+0x120>)
     918:	681b      	ldr	r3, [r3, #0]
     91a:	68db      	ldr	r3, [r3, #12]
     91c:	68db      	ldr	r3, [r3, #12]
     91e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     920:	68bb      	ldr	r3, [r7, #8]
     922:	685a      	ldr	r2, [r3, #4]
     924:	4b31      	ldr	r3, [pc, #196]	; (9ec <vTaskIncrementTick+0x12c>)
     926:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     928:	4b2c      	ldr	r3, [pc, #176]	; (9dc <vTaskIncrementTick+0x11c>)
     92a:	681a      	ldr	r2, [r3, #0]
     92c:	4b2f      	ldr	r3, [pc, #188]	; (9ec <vTaskIncrementTick+0x12c>)
     92e:	681b      	ldr	r3, [r3, #0]
     930:	429a      	cmp	r2, r3
     932:	d34d      	bcc.n	9d0 <vTaskIncrementTick+0x110>
     934:	4b2a      	ldr	r3, [pc, #168]	; (9e0 <vTaskIncrementTick+0x120>)
     936:	681b      	ldr	r3, [r3, #0]
     938:	681b      	ldr	r3, [r3, #0]
     93a:	2b00      	cmp	r3, #0
     93c:	d104      	bne.n	948 <vTaskIncrementTick+0x88>
     93e:	4b2b      	ldr	r3, [pc, #172]	; (9ec <vTaskIncrementTick+0x12c>)
     940:	f04f 32ff 	mov.w	r2, #4294967295
     944:	601a      	str	r2, [r3, #0]
     946:	e043      	b.n	9d0 <vTaskIncrementTick+0x110>
     948:	4b25      	ldr	r3, [pc, #148]	; (9e0 <vTaskIncrementTick+0x120>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	68db      	ldr	r3, [r3, #12]
     94e:	68db      	ldr	r3, [r3, #12]
     950:	60bb      	str	r3, [r7, #8]
     952:	68bb      	ldr	r3, [r7, #8]
     954:	685b      	ldr	r3, [r3, #4]
     956:	607b      	str	r3, [r7, #4]
     958:	4b20      	ldr	r3, [pc, #128]	; (9dc <vTaskIncrementTick+0x11c>)
     95a:	681a      	ldr	r2, [r3, #0]
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	429a      	cmp	r2, r3
     960:	d203      	bcs.n	96a <vTaskIncrementTick+0xaa>
     962:	4b22      	ldr	r3, [pc, #136]	; (9ec <vTaskIncrementTick+0x12c>)
     964:	687a      	ldr	r2, [r7, #4]
     966:	601a      	str	r2, [r3, #0]
     968:	e032      	b.n	9d0 <vTaskIncrementTick+0x110>
     96a:	68bb      	ldr	r3, [r7, #8]
     96c:	f103 0304 	add.w	r3, r3, #4
     970:	4618      	mov	r0, r3
     972:	f7ff fffe 	bl	0 <vListRemove>
			972: R_ARM_THM_CALL	vListRemove
     976:	68bb      	ldr	r3, [r7, #8]
     978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     97a:	2b00      	cmp	r3, #0
     97c:	d005      	beq.n	98a <vTaskIncrementTick+0xca>
     97e:	68bb      	ldr	r3, [r7, #8]
     980:	f103 0318 	add.w	r3, r3, #24
     984:	4618      	mov	r0, r3
     986:	f7ff fffe 	bl	0 <vListRemove>
			986: R_ARM_THM_CALL	vListRemove
     98a:	68bb      	ldr	r3, [r7, #8]
     98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     98e:	4b18      	ldr	r3, [pc, #96]	; (9f0 <vTaskIncrementTick+0x130>)
     990:	681b      	ldr	r3, [r3, #0]
     992:	429a      	cmp	r2, r3
     994:	d903      	bls.n	99e <vTaskIncrementTick+0xde>
     996:	68bb      	ldr	r3, [r7, #8]
     998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <vTaskIncrementTick+0x130>)
     99c:	601a      	str	r2, [r3, #0]
     99e:	68bb      	ldr	r3, [r7, #8]
     9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     9a2:	4613      	mov	r3, r2
     9a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     9a8:	189b      	adds	r3, r3, r2
     9aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
     9ae:	461a      	mov	r2, r3
     9b0:	4b10      	ldr	r3, [pc, #64]	; (9f4 <vTaskIncrementTick+0x134>)
     9b2:	18d2      	adds	r2, r2, r3
     9b4:	68bb      	ldr	r3, [r7, #8]
     9b6:	f103 0304 	add.w	r3, r3, #4
     9ba:	4610      	mov	r0, r2
     9bc:	4619      	mov	r1, r3
     9be:	f7ff fffe 	bl	0 <vListInsertEnd>
			9be: R_ARM_THM_CALL	vListInsertEnd
     9c2:	e7b7      	b.n	934 <vTaskIncrementTick+0x74>
	}
	else
	{
		++uxMissedTicks;
     9c4:	4b0c      	ldr	r3, [pc, #48]	; (9f8 <vTaskIncrementTick+0x138>)
     9c6:	681b      	ldr	r3, [r3, #0]
     9c8:	f103 0201 	add.w	r2, r3, #1
     9cc:	4b0a      	ldr	r3, [pc, #40]	; (9f8 <vTaskIncrementTick+0x138>)
     9ce:	601a      	str	r2, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
     9d0:	f107 0710 	add.w	r7, r7, #16
     9d4:	46bd      	mov	sp, r7
     9d6:	bd80      	pop	{r7, pc}
     9d8:	00000100 	.word	0x00000100
			9d8: R_ARM_ABS32	.bss
     9dc:	000000f0 	.word	0x000000f0
			9dc: R_ARM_ABS32	.bss
     9e0:	000000a4 	.word	0x000000a4
			9e0: R_ARM_ABS32	.bss
     9e4:	000000a8 	.word	0x000000a8
			9e4: R_ARM_ABS32	.bss
     9e8:	0000010c 	.word	0x0000010c
			9e8: R_ARM_ABS32	.bss
     9ec:	00000000 	.word	0x00000000
			9ec: R_ARM_ABS32	.data
     9f0:	000000f8 	.word	0x000000f8
			9f0: R_ARM_ABS32	.bss
     9f4:	00000004 	.word	0x00000004
			9f4: R_ARM_ABS32	.bss
     9f8:	00000104 	.word	0x00000104
			9f8: R_ARM_ABS32	.bss

000009fc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     9fc:	b480      	push	{r7}
     9fe:	b083      	sub	sp, #12
     a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     a02:	4b23      	ldr	r3, [pc, #140]	; (a90 <vTaskSwitchContext+0x94>)
     a04:	681b      	ldr	r3, [r3, #0]
     a06:	2b00      	cmp	r3, #0
     a08:	d00b      	beq.n	a22 <vTaskSwitchContext+0x26>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     a0a:	4b22      	ldr	r3, [pc, #136]	; (a94 <vTaskSwitchContext+0x98>)
     a0c:	f04f 0201 	mov.w	r2, #1
     a10:	601a      	str	r2, [r3, #0]
     a12:	e038      	b.n	a86 <vTaskSwitchContext+0x8a>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
     a14:	4b20      	ldr	r3, [pc, #128]	; (a98 <vTaskSwitchContext+0x9c>)
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	f103 32ff 	add.w	r2, r3, #4294967295
     a1c:	4b1e      	ldr	r3, [pc, #120]	; (a98 <vTaskSwitchContext+0x9c>)
     a1e:	601a      	str	r2, [r3, #0]
     a20:	e000      	b.n	a24 <vTaskSwitchContext+0x28>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     a22:	bf00      	nop
     a24:	4b1c      	ldr	r3, [pc, #112]	; (a98 <vTaskSwitchContext+0x9c>)
     a26:	681a      	ldr	r2, [r3, #0]
     a28:	4613      	mov	r3, r2
     a2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
     a2e:	189b      	adds	r3, r3, r2
     a30:	ea4f 0383 	mov.w	r3, r3, lsl #2
     a34:	461a      	mov	r2, r3
     a36:	4b19      	ldr	r3, [pc, #100]	; (a9c <vTaskSwitchContext+0xa0>)
     a38:	18d3      	adds	r3, r2, r3
     a3a:	681b      	ldr	r3, [r3, #0]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d0e9      	beq.n	a14 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
     a40:	4b15      	ldr	r3, [pc, #84]	; (a98 <vTaskSwitchContext+0x9c>)
     a42:	681a      	ldr	r2, [r3, #0]
     a44:	4613      	mov	r3, r2
     a46:	ea4f 0383 	mov.w	r3, r3, lsl #2
     a4a:	189b      	adds	r3, r3, r2
     a4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     a50:	461a      	mov	r2, r3
     a52:	4b12      	ldr	r3, [pc, #72]	; (a9c <vTaskSwitchContext+0xa0>)
     a54:	18d3      	adds	r3, r2, r3
     a56:	607b      	str	r3, [r7, #4]
     a58:	687b      	ldr	r3, [r7, #4]
     a5a:	685b      	ldr	r3, [r3, #4]
     a5c:	685a      	ldr	r2, [r3, #4]
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	605a      	str	r2, [r3, #4]
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	685a      	ldr	r2, [r3, #4]
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	f103 0308 	add.w	r3, r3, #8
     a6c:	429a      	cmp	r2, r3
     a6e:	d104      	bne.n	a7a <vTaskSwitchContext+0x7e>
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	685b      	ldr	r3, [r3, #4]
     a74:	685a      	ldr	r2, [r3, #4]
     a76:	687b      	ldr	r3, [r7, #4]
     a78:	605a      	str	r2, [r3, #4]
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	68db      	ldr	r3, [r3, #12]
     a80:	461a      	mov	r2, r3
     a82:	4b07      	ldr	r3, [pc, #28]	; (aa0 <vTaskSwitchContext+0xa4>)
     a84:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
     a86:	f107 070c 	add.w	r7, r7, #12
     a8a:	46bd      	mov	sp, r7
     a8c:	bc80      	pop	{r7}
     a8e:	4770      	bx	lr
     a90:	00000100 	.word	0x00000100
			a90: R_ARM_ABS32	.bss
     a94:	00000108 	.word	0x00000108
			a94: R_ARM_ABS32	.bss
     a98:	000000f8 	.word	0x000000f8
			a98: R_ARM_ABS32	.bss
     a9c:	00000004 	.word	0x00000004
			a9c: R_ARM_ABS32	.bss
     aa0:	00000000 	.word	0x00000000
			aa0: R_ARM_ABS32	pxCurrentTCB

00000aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     aa4:	b580      	push	{r7, lr}
     aa6:	b084      	sub	sp, #16
     aa8:	af00      	add	r7, sp, #0
     aaa:	6078      	str	r0, [r7, #4]
     aac:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     aae:	4b14      	ldr	r3, [pc, #80]	; (b00 <vTaskPlaceOnEventList+0x5c>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	f103 0318 	add.w	r3, r3, #24
     ab6:	6878      	ldr	r0, [r7, #4]
     ab8:	4619      	mov	r1, r3
     aba:	f7ff fffe 	bl	0 <vListInsert>
			aba: R_ARM_THM_CALL	vListInsert

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     abe:	4b10      	ldr	r3, [pc, #64]	; (b00 <vTaskPlaceOnEventList+0x5c>)
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	f103 0304 	add.w	r3, r3, #4
     ac6:	4618      	mov	r0, r3
     ac8:	f7ff fffe 	bl	0 <vListRemove>
			ac8: R_ARM_THM_CALL	vListRemove


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
     acc:	683b      	ldr	r3, [r7, #0]
     ace:	f1b3 3fff 	cmp.w	r3, #4294967295
     ad2:	d108      	bne.n	ae6 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     ad4:	4b0a      	ldr	r3, [pc, #40]	; (b00 <vTaskPlaceOnEventList+0x5c>)
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	f103 0304 	add.w	r3, r3, #4
     adc:	4809      	ldr	r0, [pc, #36]	; (b04 <vTaskPlaceOnEventList+0x60>)
     ade:	4619      	mov	r1, r3
     ae0:	f7ff fffe 	bl	0 <vListInsertEnd>
			ae0: R_ARM_THM_CALL	vListInsertEnd
     ae4:	e007      	b.n	af6 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     ae6:	4b08      	ldr	r3, [pc, #32]	; (b08 <vTaskPlaceOnEventList+0x64>)
     ae8:	681a      	ldr	r2, [r3, #0]
     aea:	683b      	ldr	r3, [r7, #0]
     aec:	18d3      	adds	r3, r2, r3
     aee:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     af0:	68f8      	ldr	r0, [r7, #12]
     af2:	f000 f997 	bl	e24 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
     af6:	f107 0710 	add.w	r7, r7, #16
     afa:	46bd      	mov	sp, r7
     afc:	bd80      	pop	{r7, pc}
     afe:	bf00      	nop
     b00:	00000000 	.word	0x00000000
			b00: R_ARM_ABS32	pxCurrentTCB
     b04:	000000d8 	.word	0x000000d8
			b04: R_ARM_ABS32	.bss
     b08:	000000f0 	.word	0x000000f0
			b08: R_ARM_ABS32	.bss

00000b0c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     b0c:	b580      	push	{r7, lr}
     b0e:	b084      	sub	sp, #16
     b10:	af00      	add	r7, sp, #0
     b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	68db      	ldr	r3, [r3, #12]
     b18:	68db      	ldr	r3, [r3, #12]
     b1a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
     b1c:	68bb      	ldr	r3, [r7, #8]
     b1e:	f103 0318 	add.w	r3, r3, #24
     b22:	4618      	mov	r0, r3
     b24:	f7ff fffe 	bl	0 <vListRemove>
			b24: R_ARM_THM_CALL	vListRemove

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     b28:	4b20      	ldr	r3, [pc, #128]	; (bac <xTaskRemoveFromEventList+0xa0>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d122      	bne.n	b76 <xTaskRemoveFromEventList+0x6a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     b30:	68bb      	ldr	r3, [r7, #8]
     b32:	f103 0304 	add.w	r3, r3, #4
     b36:	4618      	mov	r0, r3
     b38:	f7ff fffe 	bl	0 <vListRemove>
			b38: R_ARM_THM_CALL	vListRemove
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     b3c:	68bb      	ldr	r3, [r7, #8]
     b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     b40:	4b1b      	ldr	r3, [pc, #108]	; (bb0 <xTaskRemoveFromEventList+0xa4>)
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	429a      	cmp	r2, r3
     b46:	d903      	bls.n	b50 <xTaskRemoveFromEventList+0x44>
     b48:	68bb      	ldr	r3, [r7, #8]
     b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     b4c:	4b18      	ldr	r3, [pc, #96]	; (bb0 <xTaskRemoveFromEventList+0xa4>)
     b4e:	601a      	str	r2, [r3, #0]
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     b54:	4613      	mov	r3, r2
     b56:	ea4f 0383 	mov.w	r3, r3, lsl #2
     b5a:	189b      	adds	r3, r3, r2
     b5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     b60:	461a      	mov	r2, r3
     b62:	4b14      	ldr	r3, [pc, #80]	; (bb4 <xTaskRemoveFromEventList+0xa8>)
     b64:	18d2      	adds	r2, r2, r3
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	f103 0304 	add.w	r3, r3, #4
     b6c:	4610      	mov	r0, r2
     b6e:	4619      	mov	r1, r3
     b70:	f7ff fffe 	bl	0 <vListInsertEnd>
			b70: R_ARM_THM_CALL	vListInsertEnd
     b74:	e006      	b.n	b84 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     b76:	68bb      	ldr	r3, [r7, #8]
     b78:	f103 0318 	add.w	r3, r3, #24
     b7c:	480e      	ldr	r0, [pc, #56]	; (bb8 <xTaskRemoveFromEventList+0xac>)
     b7e:	4619      	mov	r1, r3
     b80:	f7ff fffe 	bl	0 <vListInsertEnd>
			b80: R_ARM_THM_CALL	vListInsertEnd
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     b84:	68bb      	ldr	r3, [r7, #8]
     b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     b88:	4b0c      	ldr	r3, [pc, #48]	; (bbc <xTaskRemoveFromEventList+0xb0>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b8e:	429a      	cmp	r2, r3
     b90:	d303      	bcc.n	b9a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
     b92:	f04f 0301 	mov.w	r3, #1
     b96:	60fb      	str	r3, [r7, #12]
     b98:	e002      	b.n	ba0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
     b9a:	f04f 0300 	mov.w	r3, #0
     b9e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
     ba0:	68fb      	ldr	r3, [r7, #12]
}
     ba2:	4618      	mov	r0, r3
     ba4:	f107 0710 	add.w	r7, r7, #16
     ba8:	46bd      	mov	sp, r7
     baa:	bd80      	pop	{r7, pc}
     bac:	00000100 	.word	0x00000100
			bac: R_ARM_ABS32	.bss
     bb0:	000000f8 	.word	0x000000f8
			bb0: R_ARM_ABS32	.bss
     bb4:	00000004 	.word	0x00000004
			bb4: R_ARM_ABS32	.bss
     bb8:	000000ac 	.word	0x000000ac
			bb8: R_ARM_ABS32	.bss
     bbc:	00000000 	.word	0x00000000
			bbc: R_ARM_ABS32	pxCurrentTCB

00000bc0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
     bc0:	b480      	push	{r7}
     bc2:	b083      	sub	sp, #12
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <vTaskSetTimeOutState+0x24>)
     bca:	681a      	ldr	r2, [r3, #0]
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
     bd0:	4b05      	ldr	r3, [pc, #20]	; (be8 <vTaskSetTimeOutState+0x28>)
     bd2:	681a      	ldr	r2, [r3, #0]
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	605a      	str	r2, [r3, #4]
}
     bd8:	f107 070c 	add.w	r7, r7, #12
     bdc:	46bd      	mov	sp, r7
     bde:	bc80      	pop	{r7}
     be0:	4770      	bx	lr
     be2:	bf00      	nop
     be4:	0000010c 	.word	0x0000010c
			be4: R_ARM_ABS32	.bss
     be8:	000000f0 	.word	0x000000f0
			be8: R_ARM_ABS32	.bss

00000bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
     bec:	b580      	push	{r7, lr}
     bee:	b084      	sub	sp, #16
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
     bf4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     bf6:	f7ff fffe 	bl	0 <vPortEnterCritical>
			bf6: R_ARM_THM_CALL	vPortEnterCritical
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
     bfa:	683b      	ldr	r3, [r7, #0]
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
     c02:	d103      	bne.n	c0c <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
     c04:	f04f 0300 	mov.w	r3, #0
     c08:	60fb      	str	r3, [r7, #12]
     c0a:	e02c      	b.n	c66 <xTaskCheckForTimeOut+0x7a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	681a      	ldr	r2, [r3, #0]
     c10:	4b19      	ldr	r3, [pc, #100]	; (c78 <xTaskCheckForTimeOut+0x8c>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	429a      	cmp	r2, r3
     c16:	d009      	beq.n	c2c <xTaskCheckForTimeOut+0x40>
     c18:	687b      	ldr	r3, [r7, #4]
     c1a:	685a      	ldr	r2, [r3, #4]
     c1c:	4b17      	ldr	r3, [pc, #92]	; (c7c <xTaskCheckForTimeOut+0x90>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	429a      	cmp	r2, r3
     c22:	d803      	bhi.n	c2c <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
     c24:	f04f 0301 	mov.w	r3, #1
     c28:	60fb      	str	r3, [r7, #12]
     c2a:	e01c      	b.n	c66 <xTaskCheckForTimeOut+0x7a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
     c2c:	4b13      	ldr	r3, [pc, #76]	; (c7c <xTaskCheckForTimeOut+0x90>)
     c2e:	681a      	ldr	r2, [r3, #0]
     c30:	687b      	ldr	r3, [r7, #4]
     c32:	685b      	ldr	r3, [r3, #4]
     c34:	1ad2      	subs	r2, r2, r3
     c36:	683b      	ldr	r3, [r7, #0]
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	429a      	cmp	r2, r3
     c3c:	d210      	bcs.n	c60 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
     c3e:	683b      	ldr	r3, [r7, #0]
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	6859      	ldr	r1, [r3, #4]
     c46:	4b0d      	ldr	r3, [pc, #52]	; (c7c <xTaskCheckForTimeOut+0x90>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	1acb      	subs	r3, r1, r3
     c4c:	18d2      	adds	r2, r2, r3
     c4e:	683b      	ldr	r3, [r7, #0]
     c50:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
     c52:	6878      	ldr	r0, [r7, #4]
     c54:	f7ff fffe 	bl	bc0 <vTaskSetTimeOutState>
			c54: R_ARM_THM_CALL	vTaskSetTimeOutState
			xReturn = pdFALSE;
     c58:	f04f 0300 	mov.w	r3, #0
     c5c:	60fb      	str	r3, [r7, #12]
     c5e:	e002      	b.n	c66 <xTaskCheckForTimeOut+0x7a>
		}
		else
		{
			xReturn = pdTRUE;
     c60:	f04f 0301 	mov.w	r3, #1
     c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
     c66:	f7ff fffe 	bl	0 <vPortExitCritical>
			c66: R_ARM_THM_CALL	vPortExitCritical

	return xReturn;
     c6a:	68fb      	ldr	r3, [r7, #12]
}
     c6c:	4618      	mov	r0, r3
     c6e:	f107 0710 	add.w	r7, r7, #16
     c72:	46bd      	mov	sp, r7
     c74:	bd80      	pop	{r7, pc}
     c76:	bf00      	nop
     c78:	0000010c 	.word	0x0000010c
			c78: R_ARM_ABS32	.bss
     c7c:	000000f0 	.word	0x000000f0
			c7c: R_ARM_ABS32	.bss

00000c80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
     c80:	b480      	push	{r7}
     c82:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <vTaskMissedYield+0x14>)
     c86:	f04f 0201 	mov.w	r2, #1
     c8a:	601a      	str	r2, [r3, #0]
}
     c8c:	46bd      	mov	sp, r7
     c8e:	bc80      	pop	{r7}
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	00000108 	.word	0x00000108
			c94: R_ARM_ABS32	.bss

00000c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
     ca0:	f000 f884 	bl	dac <prvCheckTasksWaitingTermination>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
     ca4:	e7fc      	b.n	ca0 <prvIdleTask+0x8>
     ca6:	bf00      	nop

00000ca8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	60f8      	str	r0, [r7, #12]
     cb0:	60b9      	str	r1, [r7, #8]
     cb2:	607a      	str	r2, [r7, #4]
     cb4:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	f103 0334 	add.w	r3, r3, #52	; 0x34
     cbc:	461a      	mov	r2, r3
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	4610      	mov	r0, r2
     cc2:	4619      	mov	r1, r3
     cc4:	f04f 020c 	mov.w	r2, #12
     cc8:	f7ff fffe 	bl	0 <strncpy>
			cc8: R_ARM_THM_CALL	strncpy
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     ccc:	68fb      	ldr	r3, [r7, #12]
     cce:	f04f 0200 	mov.w	r2, #0
     cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	2b05      	cmp	r3, #5
     cda:	d902      	bls.n	ce2 <prvInitialiseTCBVariables+0x3a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
     cdc:	f04f 0305 	mov.w	r3, #5
     ce0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	687a      	ldr	r2, [r7, #4]
     ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     ce8:	68fb      	ldr	r3, [r7, #12]
     cea:	687a      	ldr	r2, [r7, #4]
     cec:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     cee:	68fb      	ldr	r3, [r7, #12]
     cf0:	f103 0304 	add.w	r3, r3, #4
     cf4:	4618      	mov	r0, r3
     cf6:	f7ff fffe 	bl	0 <vListInitialiseItem>
			cf6: R_ARM_THM_CALL	vListInitialiseItem
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     cfa:	68fb      	ldr	r3, [r7, #12]
     cfc:	f103 0318 	add.w	r3, r3, #24
     d00:	4618      	mov	r0, r3
     d02:	f7ff fffe 	bl	0 <vListInitialiseItem>
			d02: R_ARM_THM_CALL	vListInitialiseItem

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	68fa      	ldr	r2, [r7, #12]
     d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	f1c3 0206 	rsb	r2, r3, #6
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	68fa      	ldr	r2, [r7, #12]
     d1a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
     d1c:	f107 0710 	add.w	r7, r7, #16
     d20:	46bd      	mov	sp, r7
     d22:	bd80      	pop	{r7, pc}

00000d24 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
     d24:	b580      	push	{r7, lr}
     d26:	b082      	sub	sp, #8
     d28:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     d2a:	f04f 0300 	mov.w	r3, #0
     d2e:	607b      	str	r3, [r7, #4]
     d30:	e010      	b.n	d54 <prvInitialiseTaskLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     d32:	687a      	ldr	r2, [r7, #4]
     d34:	4613      	mov	r3, r2
     d36:	ea4f 0383 	mov.w	r3, r3, lsl #2
     d3a:	189b      	adds	r3, r3, r2
     d3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     d40:	461a      	mov	r2, r3
     d42:	4b12      	ldr	r3, [pc, #72]	; (d8c <prvInitialiseTaskLists+0x68>)
     d44:	18d3      	adds	r3, r2, r3
     d46:	4618      	mov	r0, r3
     d48:	f7ff fffe 	bl	0 <vListInitialise>
			d48: R_ARM_THM_CALL	vListInitialise

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	f103 0301 	add.w	r3, r3, #1
     d52:	607b      	str	r3, [r7, #4]
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	2b05      	cmp	r3, #5
     d58:	d9eb      	bls.n	d32 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     d5a:	480d      	ldr	r0, [pc, #52]	; (d90 <prvInitialiseTaskLists+0x6c>)
     d5c:	f7ff fffe 	bl	0 <vListInitialise>
			d5c: R_ARM_THM_CALL	vListInitialise
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     d60:	480c      	ldr	r0, [pc, #48]	; (34 <vListInitialise+0x34>)
     d62:	f7ff fffe 	bl	0 <vListInitialise>
			d62: R_ARM_THM_CALL	vListInitialise
	vListInitialise( ( xList * ) &xPendingReadyList );
     d66:	480c      	ldr	r0, [pc, #48]	; (34 <vListInitialise+0x34>)
     d68:	f7ff fffe 	bl	0 <vListInitialise>
			d68: R_ARM_THM_CALL	vListInitialise

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
     d6c:	480b      	ldr	r0, [pc, #44]	; (30 <vListInitialise+0x30>)
     d6e:	f7ff fffe 	bl	0 <vListInitialise>
			d6e: R_ARM_THM_CALL	vListInitialise
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
     d72:	480b      	ldr	r0, [pc, #44]	; (30 <vListInitialise+0x30>)
     d74:	f7ff fffe 	bl	0 <vListInitialise>
			d74: R_ARM_THM_CALL	vListInitialise
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     d78:	4b0a      	ldr	r3, [pc, #40]	; (da4 <prvInitialiseTaskLists+0x80>)
     d7a:	4a05      	ldr	r2, [pc, #20]	; (d90 <prvInitialiseTaskLists+0x6c>)
     d7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     d7e:	4b0a      	ldr	r3, [pc, #40]	; (da8 <prvInitialiseTaskLists+0x84>)
     d80:	4a04      	ldr	r2, [pc, #16]	; (d94 <prvInitialiseTaskLists+0x70>)
     d82:	601a      	str	r2, [r3, #0]
}
     d84:	f107 0708 	add.w	r7, r7, #8
     d88:	46bd      	mov	sp, r7
     d8a:	bd80      	pop	{r7, pc}
     d8c:	00000004 	.word	0x00000004
			d8c: R_ARM_ABS32	.bss
     d90:	0000007c 	.word	0x0000007c
			d90: R_ARM_ABS32	.bss
     d94:	00000090 	.word	0x00000090
			d94: R_ARM_ABS32	.bss
     d98:	000000ac 	.word	0x000000ac
			d98: R_ARM_ABS32	.bss
     d9c:	000000c0 	.word	0x000000c0
			d9c: R_ARM_ABS32	.bss
     da0:	000000d8 	.word	0x000000d8
			da0: R_ARM_ABS32	.bss
     da4:	000000a4 	.word	0x000000a4
			da4: R_ARM_ABS32	.bss
     da8:	000000a8 	.word	0x000000a8
			da8: R_ARM_ABS32	.bss

00000dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
     dac:	b580      	push	{r7, lr}
     dae:	b082      	sub	sp, #8
     db0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     db2:	4b19      	ldr	r3, [pc, #100]	; (e18 <prvCheckTasksWaitingTermination+0x6c>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	2b00      	cmp	r3, #0
     db8:	d02a      	beq.n	e10 <prvCheckTasksWaitingTermination+0x64>
		{
			vTaskSuspendAll();
     dba:	f7ff fffe 	bl	724 <vTaskSuspendAll>
			dba: R_ARM_THM_CALL	vTaskSuspendAll
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     dbe:	4b17      	ldr	r3, [pc, #92]	; (e1c <prvCheckTasksWaitingTermination+0x70>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	bf14      	ite	ne
     dc6:	2300      	movne	r3, #0
     dc8:	2301      	moveq	r3, #1
     dca:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
     dcc:	f7ff fffe 	bl	740 <xTaskResumeAll>
			dcc: R_ARM_THM_CALL	xTaskResumeAll

			if( xListIsEmpty == pdFALSE )
     dd0:	687b      	ldr	r3, [r7, #4]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d11c      	bne.n	e10 <prvCheckTasksWaitingTermination+0x64>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
     dd6:	f7ff fffe 	bl	0 <vPortEnterCritical>
			dd6: R_ARM_THM_CALL	vPortEnterCritical
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     dda:	4b10      	ldr	r3, [pc, #64]	; (e1c <prvCheckTasksWaitingTermination+0x70>)
     ddc:	68db      	ldr	r3, [r3, #12]
     dde:	68db      	ldr	r3, [r3, #12]
     de0:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
     de2:	683b      	ldr	r3, [r7, #0]
     de4:	f103 0304 	add.w	r3, r3, #4
     de8:	4618      	mov	r0, r3
     dea:	f7ff fffe 	bl	0 <vListRemove>
			dea: R_ARM_THM_CALL	vListRemove
					--uxCurrentNumberOfTasks;
     dee:	4b0c      	ldr	r3, [pc, #48]	; (e20 <prvCheckTasksWaitingTermination+0x74>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	f103 32ff 	add.w	r2, r3, #4294967295
     df6:	4b0a      	ldr	r3, [pc, #40]	; (e20 <prvCheckTasksWaitingTermination+0x74>)
     df8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
     dfa:	4b07      	ldr	r3, [pc, #28]	; (e18 <prvCheckTasksWaitingTermination+0x6c>)
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	f103 32ff 	add.w	r2, r3, #4294967295
     e02:	4b05      	ldr	r3, [pc, #20]	; (e18 <prvCheckTasksWaitingTermination+0x6c>)
     e04:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
     e06:	f7ff fffe 	bl	0 <vPortExitCritical>
			e06: R_ARM_THM_CALL	vPortExitCritical

				prvDeleteTCB( pxTCB );
     e0a:	6838      	ldr	r0, [r7, #0]
     e0c:	f000 f8b4 	bl	f78 <prvDeleteTCB>
			}
		}
	}
	#endif
}
     e10:	f107 0708 	add.w	r7, r7, #8
     e14:	46bd      	mov	sp, r7
     e16:	bd80      	pop	{r7, pc}
     e18:	000000d4 	.word	0x000000d4
			e18: R_ARM_ABS32	.bss
     e1c:	000000c0 	.word	0x000000c0
			e1c: R_ARM_ABS32	.bss
     e20:	000000ec 	.word	0x000000ec
			e20: R_ARM_ABS32	.bss

00000e24 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     e2c:	4b14      	ldr	r3, [pc, #80]	; (e80 <prvAddCurrentTaskToDelayedList+0x5c>)
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	687a      	ldr	r2, [r7, #4]
     e32:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
     e34:	4b13      	ldr	r3, [pc, #76]	; (e84 <prvAddCurrentTaskToDelayedList+0x60>)
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	687a      	ldr	r2, [r7, #4]
     e3a:	429a      	cmp	r2, r3
     e3c:	d20a      	bcs.n	e54 <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     e3e:	4b12      	ldr	r3, [pc, #72]	; (e88 <prvAddCurrentTaskToDelayedList+0x64>)
     e40:	681a      	ldr	r2, [r3, #0]
     e42:	4b0f      	ldr	r3, [pc, #60]	; (e80 <prvAddCurrentTaskToDelayedList+0x5c>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	f103 0304 	add.w	r3, r3, #4
     e4a:	4610      	mov	r0, r2
     e4c:	4619      	mov	r1, r3
     e4e:	f7ff fffe 	bl	0 <vListInsert>
			e4e: R_ARM_THM_CALL	vListInsert
     e52:	e011      	b.n	e78 <prvAddCurrentTaskToDelayedList+0x54>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     e54:	4b0d      	ldr	r3, [pc, #52]	; (e8c <prvAddCurrentTaskToDelayedList+0x68>)
     e56:	681a      	ldr	r2, [r3, #0]
     e58:	4b09      	ldr	r3, [pc, #36]	; (e80 <prvAddCurrentTaskToDelayedList+0x5c>)
     e5a:	681b      	ldr	r3, [r3, #0]
     e5c:	f103 0304 	add.w	r3, r3, #4
     e60:	4610      	mov	r0, r2
     e62:	4619      	mov	r1, r3
     e64:	f7ff fffe 	bl	0 <vListInsert>
			e64: R_ARM_THM_CALL	vListInsert

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     e68:	4b09      	ldr	r3, [pc, #36]	; (e90 <prvAddCurrentTaskToDelayedList+0x6c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	687a      	ldr	r2, [r7, #4]
     e6e:	429a      	cmp	r2, r3
     e70:	d202      	bcs.n	e78 <prvAddCurrentTaskToDelayedList+0x54>
		{
			xNextTaskUnblockTime = xTimeToWake;
     e72:	4b07      	ldr	r3, [pc, #28]	; (e90 <prvAddCurrentTaskToDelayedList+0x6c>)
     e74:	687a      	ldr	r2, [r7, #4]
     e76:	601a      	str	r2, [r3, #0]
		}
	}
}
     e78:	f107 0708 	add.w	r7, r7, #8
     e7c:	46bd      	mov	sp, r7
     e7e:	bd80      	pop	{r7, pc}
     e80:	00000000 	.word	0x00000000
			e80: R_ARM_ABS32	pxCurrentTCB
     e84:	000000f0 	.word	0x000000f0
			e84: R_ARM_ABS32	.bss
     e88:	000000a8 	.word	0x000000a8
			e88: R_ARM_ABS32	.bss
     e8c:	000000a4 	.word	0x000000a4
			e8c: R_ARM_ABS32	.bss
     e90:	00000000 	.word	0x00000000
			e90: R_ARM_ABS32	.data

00000e94 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
     e94:	b580      	push	{r7, lr}
     e96:	b084      	sub	sp, #16
     e98:	af00      	add	r7, sp, #0
     e9a:	4603      	mov	r3, r0
     e9c:	6039      	str	r1, [r7, #0]
     e9e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
     ea0:	f04f 0044 	mov.w	r0, #68	; 0x44
     ea4:	f7ff fffe 	bl	0 <pvPortMalloc>
			ea4: R_ARM_THM_CALL	pvPortMalloc
     ea8:	4603      	mov	r3, r0
     eaa:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	2b00      	cmp	r3, #0
     eb0:	d023      	beq.n	efa <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     eb2:	683b      	ldr	r3, [r7, #0]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d107      	bne.n	ec8 <prvAllocateTCBAndStack+0x34>
     eb8:	88fb      	ldrh	r3, [r7, #6]
     eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
     ebe:	4618      	mov	r0, r3
     ec0:	f7ff fffe 	bl	0 <pvPortMalloc>
			ec0: R_ARM_THM_CALL	pvPortMalloc
     ec4:	4603      	mov	r3, r0
     ec6:	e000      	b.n	eca <prvAllocateTCBAndStack+0x36>
     ec8:	683b      	ldr	r3, [r7, #0]
     eca:	68fa      	ldr	r2, [r7, #12]
     ecc:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     ece:	68fb      	ldr	r3, [r7, #12]
     ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     ed2:	2b00      	cmp	r3, #0
     ed4:	d106      	bne.n	ee4 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     ed6:	68f8      	ldr	r0, [r7, #12]
     ed8:	f7ff fffe 	bl	0 <vPortFree>
			ed8: R_ARM_THM_CALL	vPortFree
			pxNewTCB = NULL;
     edc:	f04f 0300 	mov.w	r3, #0
     ee0:	60fb      	str	r3, [r7, #12]
     ee2:	e00a      	b.n	efa <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
     ee4:	68fb      	ldr	r3, [r7, #12]
     ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     ee8:	88fb      	ldrh	r3, [r7, #6]
     eea:	ea4f 0383 	mov.w	r3, r3, lsl #2
     eee:	4610      	mov	r0, r2
     ef0:	f04f 01a5 	mov.w	r1, #165	; 0xa5
     ef4:	461a      	mov	r2, r3
     ef6:	f7ff fffe 	bl	0 <memset>
			ef6: R_ARM_THM_CALL	memset
		}
	}

	return pxNewTCB;
     efa:	68fb      	ldr	r3, [r7, #12]
}
     efc:	4618      	mov	r0, r3
     efe:	f107 0710 	add.w	r7, r7, #16
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop

00000f08 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
     f08:	b490      	push	{r4, r7}
     f0a:	b082      	sub	sp, #8
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
     f10:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
     f14:	e006      	b.n	f24 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	f103 0301 	add.w	r3, r3, #1
     f1c:	607b      	str	r3, [r7, #4]
			usCount++;
     f1e:	f104 0301 	add.w	r3, r4, #1
     f22:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	2ba5      	cmp	r3, #165	; 0xa5
     f2a:	d0f4      	beq.n	f16 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
     f2c:	ea4f 0394 	mov.w	r3, r4, lsr #2
     f30:	b29c      	uxth	r4, r3

		return usCount;
     f32:	4623      	mov	r3, r4
	}
     f34:	4618      	mov	r0, r3
     f36:	f107 0708 	add.w	r7, r7, #8
     f3a:	46bd      	mov	sp, r7
     f3c:	bc90      	pop	{r4, r7}
     f3e:	4770      	bx	lr

00000f40 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
     f40:	b580      	push	{r7, lr}
     f42:	b086      	sub	sp, #24
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d102      	bne.n	f54 <uxTaskGetStackHighWaterMark+0x14>
     f4e:	4b09      	ldr	r3, [pc, #36]	; (f74 <uxTaskGetStackHighWaterMark+0x34>)
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	e000      	b.n	f56 <uxTaskGetStackHighWaterMark+0x16>
     f54:	687b      	ldr	r3, [r7, #4]
     f56:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
     f58:	697b      	ldr	r3, [r7, #20]
     f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     f5c:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
     f5e:	6938      	ldr	r0, [r7, #16]
     f60:	f7ff ffd2 	bl	f08 <usTaskCheckFreeStackSpace>
     f64:	4603      	mov	r3, r0
     f66:	60fb      	str	r3, [r7, #12]

		return uxReturn;
     f68:	68fb      	ldr	r3, [r7, #12]
	}
     f6a:	4618      	mov	r0, r3
     f6c:	f107 0718 	add.w	r7, r7, #24
     f70:	46bd      	mov	sp, r7
     f72:	bd80      	pop	{r7, pc}
     f74:	00000000 	.word	0x00000000
			f74: R_ARM_ABS32	pxCurrentTCB

00000f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
     f78:	b580      	push	{r7, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     f84:	4618      	mov	r0, r3
     f86:	f7ff fffe 	bl	0 <vPortFree>
			f86: R_ARM_THM_CALL	vPortFree
		vPortFree( pxTCB );
     f8a:	6878      	ldr	r0, [r7, #4]
     f8c:	f7ff fffe 	bl	0 <vPortFree>
			f8c: R_ARM_THM_CALL	vPortFree
	}
     f90:	f107 0708 	add.w	r7, r7, #8
     f94:	46bd      	mov	sp, r7
     f96:	bd80      	pop	{r7, pc}

00000f98 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
     f98:	b480      	push	{r7}
     f9a:	b083      	sub	sp, #12
     f9c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <xTaskGetCurrentTaskHandle+0x1c>)
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	607b      	str	r3, [r7, #4]

		return xReturn;
     fa4:	687b      	ldr	r3, [r7, #4]
	}
     fa6:	4618      	mov	r0, r3
     fa8:	f107 070c 	add.w	r7, r7, #12
     fac:	46bd      	mov	sp, r7
     fae:	bc80      	pop	{r7}
     fb0:	4770      	bx	lr
     fb2:	bf00      	nop
     fb4:	00000000 	.word	0x00000000
			fb4: R_ARM_ABS32	pxCurrentTCB

00000fb8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
     fb8:	b580      	push	{r7, lr}
     fba:	b084      	sub	sp, #16
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fc8:	4b25      	ldr	r3, [pc, #148]	; (1060 <vTaskPriorityInherit+0xa8>)
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fce:	429a      	cmp	r2, r3
     fd0:	d242      	bcs.n	1058 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
     fd2:	4b23      	ldr	r3, [pc, #140]	; (1060 <vTaskPriorityInherit+0xa8>)
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fd8:	f1c3 0206 	rsb	r2, r3, #6
     fdc:	68fb      	ldr	r3, [r7, #12]
     fde:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	6959      	ldr	r1, [r3, #20]
     fe4:	68fb      	ldr	r3, [r7, #12]
     fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fe8:	4613      	mov	r3, r2
     fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
     fee:	189b      	adds	r3, r3, r2
     ff0:	ea4f 0383 	mov.w	r3, r3, lsl #2
     ff4:	461a      	mov	r2, r3
     ff6:	4b1b      	ldr	r3, [pc, #108]	; (1064 <vTaskPriorityInherit+0xac>)
     ff8:	18d3      	adds	r3, r2, r3
     ffa:	4299      	cmp	r1, r3
     ffc:	d127      	bne.n	104e <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	f103 0304 	add.w	r3, r3, #4
    1004:	4618      	mov	r0, r3
    1006:	f7ff fffe 	bl	0 <vListRemove>
			1006: R_ARM_THM_CALL	vListRemove

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    100a:	4b15      	ldr	r3, [pc, #84]	; (1060 <vTaskPriorityInherit+0xa8>)
    100c:	681b      	ldr	r3, [r3, #0]
    100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1010:	68fb      	ldr	r3, [r7, #12]
    1012:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1018:	4b13      	ldr	r3, [pc, #76]	; (1068 <vTaskPriorityInherit+0xb0>)
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	429a      	cmp	r2, r3
    101e:	d903      	bls.n	1028 <vTaskPriorityInherit+0x70>
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1024:	4b10      	ldr	r3, [pc, #64]	; (1068 <vTaskPriorityInherit+0xb0>)
    1026:	601a      	str	r2, [r3, #0]
    1028:	68fb      	ldr	r3, [r7, #12]
    102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    102c:	4613      	mov	r3, r2
    102e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1032:	189b      	adds	r3, r3, r2
    1034:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1038:	461a      	mov	r2, r3
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <vTaskPriorityInherit+0xac>)
    103c:	18d2      	adds	r2, r2, r3
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	f103 0304 	add.w	r3, r3, #4
    1044:	4610      	mov	r0, r2
    1046:	4619      	mov	r1, r3
    1048:	f7ff fffe 	bl	0 <vListInsertEnd>
			1048: R_ARM_THM_CALL	vListInsertEnd
    104c:	e004      	b.n	1058 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    104e:	4b04      	ldr	r3, [pc, #16]	; (1060 <vTaskPriorityInherit+0xa8>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1054:	68fb      	ldr	r3, [r7, #12]
    1056:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    1058:	f107 0710 	add.w	r7, r7, #16
    105c:	46bd      	mov	sp, r7
    105e:	bd80      	pop	{r7, pc}
    1060:	00000000 	.word	0x00000000
			1060: R_ARM_ABS32	pxCurrentTCB
    1064:	00000004 	.word	0x00000004
			1064: R_ARM_ABS32	.bss
    1068:	000000f8 	.word	0x000000f8
			1068: R_ARM_ABS32	.bss

0000106c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    106c:	b580      	push	{r7, lr}
    106e:	b084      	sub	sp, #16
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	2b00      	cmp	r3, #0
    107c:	d031      	beq.n	10e2 <vTaskPriorityDisinherit+0x76>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1086:	429a      	cmp	r2, r3
    1088:	d02b      	beq.n	10e2 <vTaskPriorityDisinherit+0x76>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	f103 0304 	add.w	r3, r3, #4
    1090:	4618      	mov	r0, r3
    1092:	f7ff fffe 	bl	0 <vListRemove>
			1092: R_ARM_THM_CALL	vListRemove

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    109a:	68fb      	ldr	r3, [r7, #12]
    109c:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    10a2:	f1c3 0206 	rsb	r2, r3, #6
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    10aa:	68fb      	ldr	r3, [r7, #12]
    10ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    10ae:	4b0f      	ldr	r3, [pc, #60]	; (10ec <vTaskPriorityDisinherit+0x80>)
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	429a      	cmp	r2, r3
    10b4:	d903      	bls.n	10be <vTaskPriorityDisinherit+0x52>
    10b6:	68fb      	ldr	r3, [r7, #12]
    10b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    10ba:	4b0c      	ldr	r3, [pc, #48]	; (10ec <vTaskPriorityDisinherit+0x80>)
    10bc:	601a      	str	r2, [r3, #0]
    10be:	68fb      	ldr	r3, [r7, #12]
    10c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    10c2:	4613      	mov	r3, r2
    10c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    10c8:	189b      	adds	r3, r3, r2
    10ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    10ce:	461a      	mov	r2, r3
    10d0:	4b07      	ldr	r3, [pc, #28]	; (10f0 <vTaskPriorityDisinherit+0x84>)
    10d2:	18d2      	adds	r2, r2, r3
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	f103 0304 	add.w	r3, r3, #4
    10da:	4610      	mov	r0, r2
    10dc:	4619      	mov	r1, r3
    10de:	f7ff fffe 	bl	0 <vListInsertEnd>
			10de: R_ARM_THM_CALL	vListInsertEnd
			}
		}
	}
    10e2:	f107 0710 	add.w	r7, r7, #16
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	000000f8 	.word	0x000000f8
			10ec: R_ARM_ABS32	.bss
    10f0:	00000004 	.word	0x00000004
			10f0: R_ARM_ABS32	.bss
